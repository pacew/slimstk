#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("./slimstk.php");
slimstk_cmd_init ();

function setup_role ($role_name, $policy, $trust) {
	slimstk_set_region (NULL);

	$args = array ("iam", "get-role");
	$args[] = "--role-name";
	$args[] = $role_name;
	$args[] = "--query";
	$args[] = "Role.Arn";
	if (slimstk_aws ($args, 1) == NULL) {

		$args = array ("iam", "create-role");
		$args[] = "--role-name";
		$args[] = $role_name;
		$args[] = "--assume-role-policy-document";
		$args[] = json_encode ($trust);
		slimstk_aws ($args);
			   
		$args = array ("iam", "put-role-policy");
		$args[] = "--role-name";
		$args[] = $role_name;
		$args[] = "--policy-name";
		$args[] = sprintf ("%s-policy", $role_name);
		$args[] = "--policy-document";
		$args[] = json_encode ($policy);
		slimstk_aws ($args);
	}
}

function setup_server_role () {
	$role_name = "server";

	/* TODO: reduce permissions */
	$policy = array (
		"Version" => "2012-10-17",
		"Statement" => array (
			array (
				"Effect" => "Allow",
				"NotAction" => "iam:*",
				"Resource" => "*")
			)
		);

	$trust = array (
		"Version" => "2012-10-17",
		"Statement" => array (
			array ("Action" => "sts:AssumeRole",
			       "Principal" => array (
				       "Service" => "ec2.amazonaws.com"
				       ),
			       "Effect" => "Allow",
			       "Sid" => "")));


	setup_role ($role_name, $policy, $trust);
}

function find_security_group ($group_name) {
	$args = array ("ec2", "describe-security-groups");
	$val = slimstk_aws ($args);
	$groups = $val['SecurityGroups'];

	foreach ($groups as $group_info) {
		if ($group_info['GroupName'] == $group_name)
			return ($group_info);
	}
	return (NULL);
}

function setup_security_group ($region, $group_name,
			       $incoming_ports, $source_group) {
	slimstk_set_region ($region);

	if ($source_group) {
		$key = sprintf ("%s.groupid", $source_group);
		$source_group_id = slimstk_getvar_region ($key);
	}

	$group_info = find_security_group ($group_name);
	if ($group_info == NULL) {
		printf ("creating security group %s\n", $group_name);
		$args = array ("ec2", "create-security-group");
		$args[] = "--group-name";
		$args[] = $group_name;
		$args[] = "--description";
		$args[] = $group_name;
		slimstk_aws ($args);
		$group_info = find_security_group ($group_name);
		if ($group_info == NULL) {
			printf ("failed to create %s\n", $group_name);
			exit (1);
		}
	}

	$group_id = $group_info['GroupId'];
	$key = sprintf ("%s.groupid", $group_name);
	slimstk_putvar_region ($key, $group_id);

	$ipperms = array ();
	foreach ($incoming_ports as $port) {
		$match = 0;
		foreach ($group_info['IpPermissions'] as $perm) {
			if ($perm['FromPort'] == $port
			    && $perm['ToPort'] == $port
			    && $perm['IpProtocol'] == "tcp") {
				$match = 1;
				break;
			}
		}

		if (! $match) {
			printf ("adding port %d to %s\n",
				$port, $group_name);
			$ipperm = array ("IpProtocol" => "tcp",
					 "FromPort" => $port,
					 "ToPort" => $port);
			if ($source_group == NULL) {
				$item = array("CidrIp" => "0.0.0.0/0");
				$ipperm['IpRanges'] = array($item);
			} else {
				$item = array ("GroupId" => $source_group_id);
				$ipperm['UserIdGroupPairs'] = array ($item);
			}

			$ipperms[] = $ipperm;
		}
	}

	if (count ($ipperms) > 0) {
		$args = array ("ec2", "authorize-security-group-ingress");
		$args[] = "--group-id";
		$args[] = $group_id;
		$args[] = "--ip-permissions";
		$args[] = json_encode ($ipperms);
		slimstk_aws ($args);
	}

}

function setup_db ($region, $database) {
	global $slimstk;

	slimstk_set_region ($region);

	$args = array ("rds", "describe-db-instances");
	$val = slimstk_aws ($args);
	$instances = $val['DBInstances'];
	$match = 0;
	foreach ($instances as $iinfo) {
		if (strcmp ($iinfo['DBInstanceIdentifier'], $database) == 0) {
			$match = 1;
			$key = sprintf ("dbhost.%s", $database);
			slimstk_putvar_region ($key,
					       $iinfo['Endpoint']['Address']);
		}
	}

	if ($match) {
		printf ("database %s is already set up\n", $database);
		return;
	}

	printf ("create database %s %s\n", $region, $database);

	printf ("ok? ");
	if (strcmp (trim (slimstk_gets ()), "y") != 0) {
		printf ("...skip\n");
		return;
	}

	printf ("creating...\n");

	$pwname_gpg = sprintf ("%s/dbpass.%s.%s.gpg",
			       $slimstk['confdir'],
			       $slimstk['aws_acct_name'],
			       $database);

	if (! file_exists ($pwname_gpg)) {
		$db_passwd = trim (shell_exec ("pwgen -s 14 1"));
		if (strlen ($db_passwd) != 14) {
			printf ("error generating password\n");
			exit (1);
		}
		$pwname_clear = "DANGER.clear";
		@unlink ($pwname_clear);
		file_put_contents ($pwname_clear, $db_passwd."\n");

		$gpg_key_ids = slimstk_get_gpg_ids_for_db ($database);

		$cmd = sprintf ("gpg --encrypt --output %s",
				escapeshellarg ($pwname_gpg));
		foreach ($gpg_key_ids as $key_id) {
			$cmd .= sprintf (" --recipient %s",
					 escapeshellarg ($key_id));
		}
		$cmd .= sprintf (" %s", escapeshellarg ($pwname_clear));
		@unlink ($pwname_gpg);
		system ($cmd, $rc);
		if ($rc != 0) {
			printf ("error running: %s\n", $cmd);
			exit (1);
		}
		@unlink ($pwname_clear);
	}
	
	$cmd = sprintf ("gpg --quiet --decrypt --output - %s",
			escapeshellarg ($pwname_gpg));
	$db_passwd = trim (shell_exec ($cmd));
	
	if ($db_passwd == "") {
		printf ("no db passwd found\n");
		exit (1);
	}

	printf ("passwd %s\n", $db_passwd);

	$args = array ("rds", "create-db-instance");
	$args[] = "--db-instance-identifier";
	$args[] = $database;
	$args[] = "--allocated-storage";
	$args[] = "5"; /* gigabytes, range 5..3072 */
	$args[] = "--db-instance-class";
	$args[] = "db.t1.micro";
	$args[] = "--vpc-security-group-ids";
	$args[] = slimstk_getvar_region ("sgdb.groupid");
	$args[] = "--engine";
	$args[] = "MySQL";
	$args[] = "--master-username";
	$args[] = "root";
	$args[] = "--master-user-password";
	$args[] = $db_passwd;
	$args[] = "--no-publicly-accessible";
	
	slimstk_aws ($args);
	printf ("wait for database to start, then run setup-aws-acct again\n");
	exit (0);
}

function get_availability_zones () {
	global $slimstk;

	$args = array ("ec2", "describe-availability-zones");
	$val = slimstk_aws ($args);
	$avzones = array ();
	foreach ($val['AvailabilityZones'] as $zinfo) {
		if ($zinfo['RegionName'] == $slimstk['current_region']
		    && $zinfo['State'] == "available") {
			$avzones[] = $zinfo['ZoneName'];
		}
	}
	return ($avzones);
}

function setup_elb ($stkname) {
	global $slimstk;

	$stkinfo = $slimstk['stacks'][$stkname];
	slimstk_set_region ($stkinfo['region']);

	$elbname = sprintf ("%selb", $stkname);

	$args = array ("elb", "describe-load-balancers");
	$val = slimstk_aws ($args);
	$lbs = $val['LoadBalancerDescriptions'];
	$match = 0;
	foreach ($lbs as $lb) {
		if ($lb['LoadBalancerName'] == $elbname) {
			$match = 1;
			break;
		}
	}

	if ($match) {
		return ($lb['DNSName']);
	}

	$avzones = get_availability_zones ();

	$listeners = array ();
	$listeners[] = array (
		"Protocol" => "HTTP",
		"LoadBalancerPort" => 80,
		"InstanceProtocol" => "HTTP",
		"InstancePort" => 80
		);

	$args = array ("elb", "create-load-balancer");
	$args[] = "--load-balancer-name";
	$args[] = $elbname;
	$args[] = "--listeners";
	$args[] = json_encode ($listeners);
	$args[] = "--availability-zones";
	$args[] = json_encode ($avzones);
	$args[] = "--security-groups";
	$args[] = slimstk_getvar_region ("sgext.groupid");
	$val = slimstk_aws ($args);

	$dns_name = $val['DNSName'];

	$chk = array ("Target" => "HTTP:80/",
		      "Interval" => 10,
		      "Timeout" => 5,
		      "UnhealthyThreshold" => 2,
		      "HealthyThreshold" => 2);

	$args = array ("elb", "configure-health-check");
	$args[] = "--load-balancer-name";
	$args[] = $elbname;
	$args[] = "--health-check";
	$args[] = json_encode ($chk);
	slimstk_aws ($args);

	$attrs = array ("CrossZoneLoadBalancing"
			=> array ("Enabled" => true));
	$args = array ("elb", "modify-load-balancer-attributes");
	$args[] = "--load-balancer-name";
	$args[] = $elbname;
	$args[] = "--load-balancer-attributes";
	$args[] = json_encode ($attrs);
	slimstk_aws ($args);

	return ($dns_name);
}

function setup_aws_login () {
	global $slimstk;

	$acct = $slimstk['aws_acct_name'];
	$user = $_SERVER['USER'];

	if (($gpg_key_id = slimstk_get_gpg_id ($user)) == NULL) {
		printf ("can't find gpg_key_id for %s\n", $user);
		exit (1);
	}
	$access_key_basename = sprintf ("access-key-%s-%s", $acct, $user);

	$access_key_gpg = sprintf ("%s/%s.gpg",
				   $slimstk['confdir'], $access_key_basename);
	
	if (! file_exists ($access_key_gpg)) {
		printf ("need access_key and secret_access_key for %s on %s\n",
			$user, $acct);
		printf ("access_key_id: ");
		$access_key_id = trim (slimstk_gets ());
		printf ("secret_access_key: ");
		$secret_access_key = trim (slimstk_gets ());

		$text = sprintf ("[%s-%s]\n", $acct, $user);
		$text .= sprintf ("aws_access_key_id = %s\n", $access_key_id);
		$text .= sprintf ("aws_secret_access_key = %s\n",
				  $secret_access_key);
		
		$cleartext_file = "DANGER.clear";
		file_put_contents ($cleartext_file, $text);
		$cmd = sprintf ("gpg --encrypt --output %s --recipient %s %s",
				escapeshellarg ($access_key_gpg),
				escapeshellarg ($gpg_key_id),
				escapeshellarg ($cleartext_file));
		system ($cmd, $rc);
		@unlink ($cleartext_file);
		if ($rc != 0) {
			printf ("error storing %s\n", $access_key_gpg);
			exit (1);
		}
	}
					
	$lfile = sprintf ("%s/bin/slimstk-login-%s",
			  $_SERVER['HOME'], $slimstk['aws_acct_name']);

	$text = "#! /bin/sh\n";
	$prog = sprintf ("%s/slimstk-login", getcwd ());
	$text .= sprintf ("%s %s\n",
			  escapeshellarg ($prog),
			  escapeshellarg ($slimstk['confdir']));
	file_put_contents ($lfile, $text);
	chmod ($lfile, 0775);
}

function setup_kms ($region) {
	global $slimstk;

	slimstk_set_region ($region);

	$alias = sprintf ("alias/%s", $slimstk['aws_acct_name']);
	$args = array ("kms", "list-aliases");
	$val = slimstk_aws ($args);
	$match = 0;
	foreach ($val['Aliases'] as $ainfo) {
		if (strcmp ($ainfo['AliasName'], $alias) == 0) {
			$match = 1;
			break;
		}
	}

	if ($match == 0) {
		printf ("you need to use the aws console create a"
			." key with alias %s\n", $slimstk['aws_acct_name']);
		exit (1);
	}
}

function setup_s3 () {
	global $slimstk;

	$bucket = sprintf ("s3://%s-deploy", $slimstk['aws_acct_name']);

	$cmd = sprintf ("aws s3 ls %s > /dev/null 2>&1",
			escapeshellarg ($bucket));
	system ($cmd, $rc);
	if ($rc != 0) {
		printf ("making bucket %s\n", $bucket);
		$cmd = sprintf ("aws s3 mb %s", escapeshellarg ($bucket));
		system ($cmd, $rc);
		if ($rc != 0) {
			printf ("error making bucket %s\n", $bucket);
			exit (1);
		}
	}
}

/* ================================================================ */

setup_s3 ();

setup_aws_login ();

setup_server_role ();

$region_done = array ();
foreach ($slimstk['stacks'] as $stkname => $stkinfo) {
	$region = $stkinfo['region'];
	if (isset ($region_done[$region]))
		continue;

	$region_done[$region] = 1;

	setup_security_group ($region,
			      "sgext",
			      array (22, 80, 443),
			      NULL);
	setup_security_group ($region,
			      "sgdb",
			      array (3306),
			      "sgext");

	setup_kms ($region);
}

$region_db_done = array ();
foreach ($slimstk['stacks'] as $stkname => $stkinfo) {
	$region = $stkinfo['region'];
	$db = $stkinfo['database'];
	
	$key = sprintf ("%s|%s", $region, $db);
	if (! isset ($region_db_done[$key])) {
		$region_db_done[$key] = 1;
		setup_db ($region, $db);
	}
}

foreach ($slimstk['stacks'] as $stkname => $dummy) {
	setup_elb ($stkname);
}


printf ("be sure to commit any modified files in %s\n", $slimstk['confdir']);
 