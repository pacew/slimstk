#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("/var/slimstk/slimstk.php");
slimstk_cmd_init ();

$enable_ssl = 1;

$issue = file_get_contents ("/etc/issue");
if (preg_match ('/Ubuntu 14/', $issue)) {
	$systype = "ubuntu-14";
} else if (preg_match ('/Ubuntu 12/', $issue)) {
	$systype = "ubuntu-12";
} else if (preg_match ('/Amazon/', $issue)) {
	$systype = "amazon";
} else {
	printf ("unknown system type\n");
	exit (1);
}

if ($systype == "amazon") {
	$apache_dir = "/etc/apache";
	$apachectl = "apachectl";
	$avail_dir = NULL;
	$enabled_dir = "/home/ec2-user/sites-enabled";
	$conf_suffix = ".conf";
} else {
	$apache_dir = "/etc/apache2";
	$apachectl = "apache2ctl";
	$avail_dir = "/etc/apache2/sites-available";
	$enabled_dir = "/etc/apache2/sites-enabled";
	if ($systype == "ubuntu-14") {
		$conf_suffix = ".conf";
	} else {
		$conf_suffix = "";
	}
}

$siteid = preg_replace ('/[.].*/', '', basename (getcwd ()));
if (! preg_match ('/-/', $siteid))
	$siteid .= sprintf ("-%s", $_SERVER['USER']);

$config = array ();
$config['confdir'] = $slimstk['confdir'];
$config['siteid'] = $siteid;

preg_match ('/^(.*)-([^-]*)$/', $siteid, $parts);
$app_name = $parts[1];
$conf_key = $parts[2];

$config['site_name'] = $app_name;
$config['conf_key'] = $conf_key;

if (($appinfo = @$slimstk['apps'][$app_name]) == NULL)
	$appinfo = array ();

if ($systype == "amazon") {
	$config['devel_mode'] = 0;

	$region = $stkinfo['region'];

	$sinfo = NULL;
	foreach ($stkinfo['sites'] as $name => $sinfo) {
		if (strcmp ($name, $siteid) == 0)
			break;
	}

	if ($sinfo == NULL) {
		printf ("can't find siteid %s\n", $siteid);
		exit (1);
	}

	if (! @$sinfo['ssl'])
		$enable_ssl = 0;

	$config['url_name'] = $sinfo['url_name'];
	$config['site_port'] = 80;

	if ($enable_ssl) {
		$config['ssl_port'] = 443;

		$keyfile = sprintf ("%s.key", $config['url_name']);
		$kmsfile = sprintf ("%s.%s.kms", $keyfile, $region);
		if (file_exists ($kmsfile) && ! file_exists ($keyfile)) {
			$cmd = sprintf ("%s/slimstk-inst/kms-decrypt %s %s %s",
					$_SERVER['HOME'],
					$region, $kmsfile, $keyfile);
			printf ("running: %s\n", $cmd);
			system ($cmd, $rc);
			if ($rc != 0) {
				printf ("error running: %s\n", $cmd);
				exit (1);
			}
			chmod ($keyfile, 0600);
		}
	}

} else {
	$config['devel_mode'] = 1;

	$nat_info_file = sprintf ("%s/NAT_INFO", $apache_dir);
	$nat_info = @file_get_contents ($nat_info_file);
	if (sscanf ($nat_info, "%s %d", $name, $base) == 2) {
		$config['url_name'] = $name;
		$port_base = $base;
	} else {
		$config['url_name'] = "local.apebble.com";
		$port_base = 8000;
	}
	$port_end = $port_base + 900;
}

function find_ports () {
	/* only runs on ubuntu */
	global $systype;
	global $port_base, $port_end, $ports_used;
	global $apache_dir, $siteid;
	global $config;
	global $avail_dir, $conf_suffix;

	$fname = sprintf ("%s/%s%s", $avail_dir, $siteid, $conf_suffix);

	$my_prev_ports = array ();
	if (($f = @fopen ($fname, "r")) != NULL) {
		while (($row = fgets ($f)) != NULL) {
			if (sscanf ($row, "Listen %d", $port) == 1) {
				$my_prev_ports[] = $port;
			}
		}
	}

	if (count ($my_prev_ports) >= 1)
		$config['site_port'] = $my_prev_ports[0];

	if (count ($my_prev_ports) >= 2)
		$config['ssl_port'] = @$my_prev_ports[1];

	exec ("grep --no-filename '^[ 	]*Listen'"
	      ." /etc/apache2/conf.d/*"
	      ." /etc/apache2/sites-enabled/*"
	      ." 2> /dev/null",
	      $outlines);
	$ports_used = array ();
	foreach ($outlines as $row) {
		if (sscanf ($row, "Listen %d", $port) == 1) {
			$ports_used[$port] = 1;
		}
	}
}

function alloc_port () {
	global $ports_used, $port_end, $port_base;
	
	if (! isset ($ports_used))
		find_ports ();

	for ($port = $port_end - 1; $port >= $port_base; $port--) {
		if (! isset ($ports_used[$port])) {
			$ports_used[$port] = 1;
			return ($port);
		}
	}
	return (-1);
}

$need_ports = 0;
if (! isset ($config['site_port'])
    || ($enable_ssl && ! isset ($config['ssl_port']))) {
	find_ports ();
}

if (! isset ($config['site_port']))
	$config['site_port'] = alloc_port ();

if ($enable_ssl && ! isset ($config['ssl_port']))
	$config['ssl_port'] = alloc_port ();

$config['site_url'] = make_url ($config['url_name'], $config['site_port'], 0);
if ($enable_ssl) {
	$config['ssl_url'] = make_url ($config['url_name'],
				       $config['ssl_port'], 1);
}

$apache_conf = "";

function make_url ($host, $port, $ssl_flag) {
	if ($ssl_flag) {
		if ($port == 443) {
			return (sprintf ("https://%s/", $host));
		} else {
			return (sprintf ("https://%s:%d/", $host, $port));
		}
	} else {
		if ($port == 80) {
			return (sprintf ("http://%s/", $host));
		} else {
			return (sprintf ("http://%s:%d/", $host, $port));
		}
	}
}

function make_ssl_params ($base) {
	$crtname = sprintf ("%s.crt", $base);
	$keyname = sprintf ("%s.key", $base);
	$chainname = sprintf ("%s.chain.pem", $base);

	if (! file_exists ($crtname))
		return (NULL);

	if (! file_exists ($keyname))
		return (NULL);

	if (! file_exists ($chainname))
		return (NULL);

	$ret = sprintf ("  SSLCertificateKeyFile %s\n"
			."  SSLCertificateFile %s\n"
			."  SSLCertificateChainFile %s\n",
			$keyname, $crtname, $chainname);
	return ($ret);
}

function find_ssl_files ($name) {
	global $apache_dir;

	$base = sprintf ("%s/%s", getcwd (), $name);
	if (($ret = make_ssl_params ($base)) != NULL)
		return ($ret);

	$base = sprintf ("%s/%s", $apache_dir, $name);
	if (($ret = make_ssl_params ($base)) != NULL)
		return ($ret);

	$wild = preg_replace ("/^[^.]*[.]/", "wildcard.", $name);
	$base = sprintf ("%s/%s", $apache_dir, $wild);
	if (($ret = make_ssl_params ($base)) != NULL)
		return ($ret);

	return (NULL);
}

function make_virtual_host ($args) {
	$ret = "";

	if ($args->port != 80 && $args->port != 443) {
		$ret .= sprintf ("Listen %d\n", $args->port);
	}

	if (strncmp ($args->name, "www.", 4) == 0) {
		$with_www = $args->name;
		$without_www = substr ($args->name, 4);
	} else {
		$with_www = "www.".$args->name;
		$without_www = $args->name;
	}

	$ret .= sprintf ("<VirtualHost *:%d>\n", $args->port);

	$ret .= sprintf ("  ServerName %s\n", $with_www);
	$ret .= sprintf ("  ServerAlias %s\n", $without_www);

	$ret .= sprintf ("  DocumentRoot %s/website\n", getcwd ());
	$ret .= sprintf ("  FileETag none\n");

	global $systype;
	switch ($systype) {
	case "ubuntu-12": case "ubuntu-14":
		$ret .= sprintf ("  php_flag session.gc_probability 0\n");
		break;
	}
	$ret .= sprintf ("  php_flag html_errors On\n");
	$ret .= sprintf ("  php_flag display_errors On\n");

	if ($args->ssl_flag) {
		$ret .= sprintf ("  SSLEngine on\n");

		if (($ssl = find_ssl_files ($args->name)) == NULL) {
			printf ("can't find ssl files for %s\n", $args->name);
			exit (1);
		}

		$ret .= $ssl;
	}
		
	$ret .= "\n";

	$ret .= "  RewriteEngine on\n";
	$ret .= "\n";

	$desturl = make_url ($args->name, $args->port, $args->ssl_flag);
	$desturl = rtrim ($desturl, '/');

	$ret .= sprintf ("  RewriteCond %%{HTTP_HOST} ^%s [NC]\n",
			 $with_www);
	$ret .= sprintf ("  RewriteRule ^(.*) %s\$1 [R]\n", $desturl);

	$ret .= "\n";

	if (0) {
		$ret .= "  LogLevel debug\n";
	}
	$ret .= "</VirtualHost>\n\n";

	return ($ret);
}

$apache_conf = "";

$apache_conf .= sprintf ("<Directory %s/website>\n", getcwd ());
$apache_conf .= "  Options Indexes FollowSymLinks\n";
$apache_conf .= "  AllowOverride None\n";
$apache_conf .= "  Allow from all\n";
if ($systype == "ubuntu-14")
	$apache_conf .= "  Require all granted\n";

foreach ($config as $name => $val) {
	$apache_conf .= sprintf ("  SetEnv %s \"%s\"\n",
				 $name, addslashes ($val));

	/* also add to current environment for benefit of get_db() later */
	$_SERVER[$name] = $val;
}

$apache_conf .= "</Directory>\n";
$apache_conf .= "\n";

$args = (object)NULL;
$args->name = $config['url_name'];
$args->port = $config['site_port'];
$args->ssl_flag = 0;
$apache_conf .= make_virtual_host ($args);

if ($enable_ssl) {
	$args = (object)NULL;
	$args->name = $config['url_name'];
	$args->port = $config['ssl_port'];
	$args->ssl_flag = 1;
	$apache_conf .= make_virtual_host ($args);
}

$tmpname = "TMP.conf";
file_put_contents ($tmpname, $apache_conf);

printf ("config ready ... running configtest\n");
$outlines = NULL;
exec ("sudo $apachectl configtest 2>&1", $outlines, $rc);
if ($rc != 0) {
	printf ("apache configtest: pre-existing error\n");
	printf ("%s\n", implode ("\n", $outlines));
	exit (1);
}

$active_cfile = sprintf ("%s/%s%s", $enabled_dir, $siteid, $conf_suffix);
$new_cfile = "TMP.conf";

$active_conf = @file_get_contents ($active_cfile);

$need_restart = 0;
if ($active_conf == "")
	$need_restart = 1;

if ($avail_dir) {
	$avail_cfile = sprintf ("%s/%s%s", $avail_dir, $siteid, $conf_suffix);
	system ("sudo cp $new_cfile $avail_cfile");
	if ($active_conf == "")
		system ("sudo a2ensite -q $siteid");
} else {
	file_put_contents ($active_cfile, $apache_conf);
}

$outlines = NULL;
exec ("sudo $apachectl configtest 2>&1", $outlines, $rc);
if ($rc != 0) {
	if ($avail_dir) {
		system ("sudo a2dissite $siteid");
	} else {
		system ("rm -f $active_cfile");
	}
	printf ("new config file causes error:\n");
	printf ("%s\n", implode ("\n", $outlines));
	exit (1);
}
	
system ("sudo $apachectl graceful");

if (@$appinfo['slimstkapp']) {
	require_once ("/var/slimstk/slimstkapp.php");
	if (maybe_create_database ($_SERVER['siteid'], NULL) < 0) {
		printf ("can't connect to database %s\n", $_SERVER['siteid']);
	} else {
		slimstk_setup_schema ();
		
		if (file_exists ("schema.php")) {
			$schema = NULL;
			require_once ("schema.php");
			dbpatch (NULL, $schema);
		}
	}
}

printf ("%s\n", $config['site_url']);
if ($enable_ssl) {
	printf ("%s\n", $config['ssl_url']);
}
