#! /usr/bin/php
<?php /* -*- mode:php -*- */

function usage () {
	printf ("usage: asg-cycle confdir stkname\n");
	exit (1);
}

$argv = $_SERVER['argv'];
$confdir = trim (@$argv[1]);
$stkname = trim (@$argv[2]);
if (! file_exists ($confdir . "/stacks.json"))
	usage ();
if ($stkname == "")
	usage ();
$_SERVER['confdir'] = $confdir;

require_once ("/opt/slimstk/slimstkcmd.php");
slimstk_init ();

if ((@$stkinfo = $slimstk['stacks'][$stkname]) == NULL) {
	printf ("unknown stack %s for account %s\n",
		$stkname, $slimstk['aws_acct_name']);
	exit (1);
}
$region = $stkinfo['region'];
slimstk_set_region ($region);

$elb_name = sprintf ("%selb", $stkname);
$asg_name = sprintf ("%sasg", $stkname);

function get_autoscaling_group () {
	global $asg_name;

	$args = array ("autoscaling", "describe-auto-scaling-groups");
	$val = slimstk_aws ($args);
	foreach ($val['AutoScalingGroups'] as $group) {
		if ($group['AutoScalingGroupName'] == $asg_name) {
			return ($group);
		}
	}
	return (NULL);
}

$asg = get_autoscaling_group ();
$min_size = intval ($asg['MinSize']);
$max_size = intval ($asg['MaxSize']);
$desired_capacity = intval ($asg['DesiredCapacity']);
$cur_lcname = $asg['LaunchConfigurationName'];

$cur_lconfig = NULL;
$args = array ("autoscaling", "describe-launch-configurations");
$val = slimstk_aws ($args);
foreach ($val['LaunchConfigurations'] as $lconfig) {
	$lcname = $lconfig['LaunchConfigurationName'];
	if (strcmp ($lcname, $cur_lcname) == 0) {
		$cur_lconfig = $lconfig;
		break;
	}
}

if ($cur_lconfig == NULL) {
	printf ("can't find current launch configuration %s\n",
		$cur_lcname);
	exit (1);
}

$cur_lctime = strtotime ($cur_lconfig['CreatedTime']);

$insts = array ();
$args = array ("ec2", "describe-instances");
$val = slimstk_aws ($args);
foreach ($val['Reservations'] as $resv) {
	foreach ($resv['Instances'] as $inst) {
		$inst_id = $inst['InstanceId'];
		$insts[$inst_id] = $inst;
	}
}

$stale_insts = array ();
$good_insts = array ();
$strange_insts = array ();
foreach ($asg['Instances'] as $asg_inst) {
	$inst_id = $asg_inst['InstanceId'];
	if (($inst = @$insts[$inst_id]) == NULL) {
		printf ("inst %s is in the asg but not in ec2 insts\n",
			$inst_id);
		exit (1);
	}

	$inst_time = strtotime ($inst['LaunchTime']);

	if ($inst_time > $cur_lctime) {
		if (strcasecmp($asg_inst['LifecycleState'], "InService") == 0
		    && strcasecmp($asg_inst['HealthStatus'], "Healthy") == 0){
			/* TODO make sure inst is all the way up */
			$good_insts[] = $asg_inst;
		} else {
			$strange_insts[] = $asg_inst;
		}
	} else {
		$stale_insts[] = $asg_inst;
	}
}

function print_inst_ids ($prefix, $insts) {
	printf ("%s", $prefix);
	foreach ($insts as $asg_inst) {
		printf (" %s", $asg_inst['InstanceId']);
	}
	printf ("\n");
}

print_inst_ids ("stale:", $stale_insts);
print_inst_ids ("good:", $good_insts);
print_inst_ids ("strange:", $strange_insts);

if (count ($strange_insts) > 0) {
	printf ("can't proceed while these insts are in strange states:\n");
	printf ("%s\n", json_encode ($strange_insts));
	exit (1);
}

if (($victim = @$stale_insts[0]) == NULL) {
	printf ("no stale insts\n");
	exit (0);
}	

if (count ($good_insts) == 0
    && $desired_capacity < $max_size) {
	$desired_capacity++;

	printf ("all insts are stale ... increasing desired capcity\n");
	system ("date");
	$args = array ("autoscaling", "set-desired-capacity");
	$args[] = "--auto-scaling-group-name";
	$args[] = $asg_name;
	$args[] = "--desired-capacity";
	$args[] = $desired_capacity;
	$args[] = "--no-honor-cooldown";
	slimstk_aws ($args);
	exit (0);
}

$inst_id = $victim['InstanceId'];
printf ("terminating stale inst %s\n", $inst_id);

$args = array ("autoscaling", "terminate-instance-in-auto-scaling-group");
$args[] = "--instance-id";
$args[] = $inst_id;
$args[] = "--should-decrement-desired-capacity";
$val = slimstk_aws ($args);
printf ("%s\n", json_encode ($val));
