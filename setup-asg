#! /usr/bin/php
<?php /* -*- mode:php -*- */

function usage () {
	printf ("usage: setup-asg confdir stackname\n");
	exit (1);
}

$argv = $_SERVER['argv'];
$confdir = trim (@$argv[1]);
$stkname = trim (@$argv[2]);
if (! file_exists ($confdir . "/stacks.json"))
	usage ();
if ($stkname == "")
	usage ();
$_SERVER['confdir'] = $confdir;

require_once ("/opt/slimstk/slimstkcmd.php");
slimstk_init ();

if ((@$stkinfo = $slimstk['stacks'][$stkname]) == NULL) {
	printf ("unknown stack %s for account %s\n",
		$stkname, $slimstk['aws_acct_name']);
	exit (1);
}
$region = $stkinfo['region'];
slimstk_set_region ($region);

$min_size = 1;
$max_size = 2;

$elb_name = sprintf ("%selb", $stkname);
$asg_name = sprintf ("%sasg", $stkname);
$profile_name = "inst-profile";

$sgext_groupid = slimstk_getvar_region ("sgext.groupid");

$subnet_ids = json_decode (slimstk_getvar_region ("subnet_ids"));

/* http://aws.amazon.com/amazon-linux-ami/ */
/* we use Amazon Linux HVM EBS-Backed 64-bit */

$images = array ();
$images['us-east-1'] = "ami-146e2a7c"; /* AMI 2014.09.2 released 2015-01-29 */
$images['us-west-2'] = "ami-dfc39aef"; /* AMI 2014.09.2 released 2015-01-29 */
$images['us-west-1'] = "ami-42908907"; /* AMI 2014.09.2 released 2015-01-29 */

if (($image_id = @$images[$region]) == NULL) {
	printf ("can't find AMI image id - you need to update stack-config\n");
	exit (1);
}

/*
 * t2.micro .013 $9.36/mo
 * t2.small .026 $18.72
 * t2.medium .052 $37.44
 * m3.medium .070 $50.40
 * m3.large .140 $100
 */
$instance_type = "t2.small";

$keypair = "test-key-pair";

$base_pkgs = array (
	"mysql",
	"mysql-server",
	"mysql-libs",
	"httpd",
	"php",
	"php-mysql",
	"emacs",
	"aws-cli",
	"git",
	"mod_ssl",
	"php-pecl-xdebug"
	);

function make_boot_script ($boot) {
	/*
	 * run as root in the root directory, no arguments
	 * environment is pretty bare - here is interesting stuff:
	 * TERM=linux
	 * PATH=/sbin:/usr/sbin:/bin:/usr/bin
	 * LANG=en_US.UTF-8
	 * (no USER)
	 *
	 * stdout and stderr go to /var/log/cloud-init-output.log
	 *
	 * if it exists with an error, it is noted in the log but
	 * apparently has no other effect
	 */
	$ret = "#! /bin/sh -x\n";
	$ret .= "echo 'slimstk startup'\n";
	$ret .= "date\n";
	/* allow ec2-user to do sudo in scripts */
	$ret .= "(echo '/^Defaults.*requiretty/s/^/#/'; echo 'w')"
		." | ed /etc/sudoers\n";

	/* change to alternative ssh port */
	global $alternative_ssh_port;
	$ret .= sprintf ("(echo '/^#Port 22.*/s/.*/Port %d/'; echo 'w')"
			 ." | ed /etc/ssh/sshd_config\n",
			 $alternative_ssh_port);
	$ret .= "service sshd restart\n";

	$ret .= "mkdir -p /home/ec2-user/.ssh\n";
	$ret .= "cat > /home/ec2-user/.ssh/authorized_keys <<EOF\n";
	$ret .= $boot['authorized_keys'];
	$ret .= "EOF\n";
	$ret .= "chown -R ec2-user:ec2-user /home/ec2-user/.ssh\n";
	$ret .= "chmod -R go-rwx /home/ec2-user/.ssh\n";

	$ret .= "yum update -y\n";
	$ret .= "date\n";
	$ret .= sprintf ("yum install -y %s\n", implode (" ", $boot['pkgs']));
	$ret .= "date\n";

	$boot_tar = basename ($boot['boot_s3']);
	$ret .= sprintf ("aws s3 cp %s /tmp/%s\n", $boot['boot_s3'], $boot_tar);
	$ret .= "mkdir /opt/slimstk\n";
	$ret .= sprintf ("tar -C /opt/slimstk -xf /tmp/%s\n", $boot_tar);
	$ret .= "chown -R ec2-user:ec2-user /opt/slimstk\n";

	$ret .= "su --command /opt/slimstk/boot --login ec2-user\n";
	$ret .= "echo 'slimstk boot done'\n";
	$ret .= "date\n";

	return ($ret);
}

function build_boot_tar () {
	global $slimstk, $stkname, $stkinfo, $region;

	$ret = array ();
	
	$authorized_keys = "";
	foreach ($stkinfo['admins'] as $user) {
		$src = sprintf ("%s/sshkey-%s.pub", $slimstk['confdir'], $user);
		if (! file_exists ($src)) {
			printf ("%s is missing\n", $src);
			exit (1);
		}
		$authorized_keys .= trim (file_get_contents ($src))."\n";
	}
	$ret['authorized_keys'] = $authorized_keys;

	$files = array ();

	file_put_contents ("TMP.stkname", $stkname . "\n");
	$files[] = array ('src' => "TMP.stkname",
			  'dst' => "stkname");

	$src = sprintf ("%s/dbpass.%s.%s.%s.kms",
			$slimstk['confdir'],
			$slimstk['aws_acct_name'],
			$stkinfo['database'],
			$region);
	$files[] = array ('src' => $src,
			  'dst' => basename ($src));

	$src = sprintf ("%s/stacks.json", $slimstk['confdir']);
	$files[] = array ('src' => $src,
			  'dst' => basename ($src));

	$src = sprintf ("%s/vars.json", $slimstk['confdir']);
	$files[] = array ('src' => $src,
			  'dst' => basename ($src));

	foreach ($slimstk['files'] as $fname) {
		$src = sprintf ("%s/%s", $slimstk['confdir'], $fname);
		if (! file_exists ($src)) {
			$kms_src = sprintf ("%s.%s.kms", $src, $region);
			if (file_exists ($kms_src))
				$src = $kms_src;
		}
		$files[] = array ('src' => $src,
				  'dst' => basename ($src));
	}

	$ifiles = explode ("\n", file_get_contents ("INST-FILES"));
	foreach ($ifiles as $src) {
		if (($src = trim ($src)) == "")
			continue;
		$files[] = array ('src' => $src,
				  'dst' => basename ($src));
	}

	usort ($files,
	       function ($a, $b) {
		       return (strcmp ($a['dst'], $b['dst']));
	       });
	$manifest = "";
	foreach ($files as $fp) {
		$err = 0;
		if (! file_exists ($fp['src'])) {
			printf ("required file %s is missing\n",
				$fp['src']);
			$err = 1;
		}
		if ($err) {
			printf ("check %s/stacks.json and ./INST-FILES\n",
				$slimstk['confdir']);
			exit (1);
		}
		$manifest .= sprintf ("%s  %s\n",
				      md5(file_get_contents ($fp['src'])),
				      $fp['dst']);
	}

	slimstk_mktar ("TMP.tgz", $files);
	
	$manifest_md5 = md5 ($manifest);
	$sig = substr ($manifest_md5, 0, 6);
	$tarname = sprintf ("boot.%s.%s.tgz", $stkname, $sig);

	$boot_s3 = sprintf ("s3://%s/%s", $stkinfo['bucket'], $tarname);
	$cmd = sprintf ("aws s3 cp TMP.tgz %s", escapeshellarg ($boot_s3));
	printf ("%s\n", $cmd);
	system ($cmd);

	$ret['boot_s3'] = $boot_s3;

	global $base_pkgs;
	$ret['pkgs'] = $base_pkgs;

	return ($ret);
}

$boot = build_boot_tar ();
$user_data = make_boot_script ($boot);

file_put_contents ("TMP.userdata", $user_data);

$userdata_limit = 16 * 1024;
printf ("userdata is %d bytes of %d allowed\n",
	strlen ($user_data), $userdata_limit);

if (strlen ($user_data) >= $userdata_limit) {
	printf ("user_data too big\n");
	exit (1);
}

function get_autoscaling_group () {
	global $asg_name;

	$args = array ("autoscaling", "describe-auto-scaling-groups");
	$val = slimstk_aws ($args);
	foreach ($val['AutoScalingGroups'] as $group) {
		if ($group['AutoScalingGroupName'] == $asg_name) {
			return ($group);
		}
	}
	return (NULL);
}

$lconfigs = array ();
$lconfigs_max_seq = 0;
function get_launch_configurations () {
	global $lconfigs, $stkname, $lconfigs_max_seq;

	$max_seq = 0;

	$args = array ("autoscaling", "describe-launch-configurations");
	$val = slimstk_aws ($args);
	foreach ($val['LaunchConfigurations'] as $lc) {
		/* only pay attention to names like STKNAME_launch_### */
		$name = $lc['LaunchConfigurationName'];
		$arr = explode ('_', $name);
		if (strcmp (@$arr[0], $stkname) != 0)
			continue;
		if (strcmp (@$arr[1], "launch") != 0)
			continue;
		$seq = intval (@$arr[2]);
		if ($seq > $max_seq)
			$max_seq = $seq;

		$lconfigs[$name] = $lc;
	}

	$lconfigs_max_seq = $max_seq;
}

function lconfig_ok ($lconfig) {
	global $sgext_groupid, $profile_name, $user_data, $keypair;
	global $image_id, $instance_type;
		
	if (strcmp (base64_decode ($lconfig['UserData']), $user_data) != 0)
		return (0);

	if (strcmp (@$lconfig['IamInstanceProfile'], $profile_name) != 0)
		return (0);

	if (strcmp (@$lconfig['KeyName'], @$keypair) != 0)
		return (0);

	if (array_search ($sgext_groupid, $lconfig['SecurityGroups']) === FALSE)
		return (0);

	if (strcmp ($lconfig['ImageId'], $image_id) != 0)
		return (0);

	if (strcmp ($lconfig['InstanceType'], $instance_type) != 0)
		return (0);

	if (! @$lconfig['AssociatePublicIpAddress'])
		return (0);

	return (1);
}

function delete_launch_configuration ($name) {
	$args = array ("autoscaling", "delete-launch-configuration");
	$args[] = "--launch-configuration-name";
	$args[] = $name;
	slimstk_aws ($args);
}

function make_lconfig ($name) {
	global $image_id, $instance_type, $sgext_groupid;
	global $profile_name, $user_data, $keypair;

	printf ("creating launch configuration %s...\n", $name);
	$args = array ("autoscaling", "create-launch-configuration");
	$args[] = "--user-data";
	$args[] = $user_data;
	$args[] = "--iam-instance-profile";
	$args[] = $profile_name;
	if (isset ($keypair)) {
		$args[] = "--key-name";
		$args[] = $keypair;
	}
	$args[] = "--security-groups";
	$args[] = $sgext_groupid;
	$args[] = "--launch-configuration-name";
	$args[] = $name;
	$args[] = "--image-id";
	$args[] = $image_id;
	$args[] = "--instance-type";
	$args[] = $instance_type;
	$args[] = "--associate-public-ip-address";
	slimstk_aws ($args);
}

/* ================================================================ */

get_launch_configurations ();

$make_new_lconfig = 1;
if (($asg = get_autoscaling_group ()) != NULL) {
	$cur_lcname = $asg['LaunchConfigurationName'];
	$lconfig = @$lconfigs[$cur_lcname];
	if (lconfig_ok ($lconfig)) {
		$make_new_lconfig = 0;
		$use_lcname = $cur_lcname;
	}
}

if ($make_new_lconfig) {
	$use_lcname = sprintf ("%s_launch_%d", $stkname, $lconfigs_max_seq + 1);
	make_lconfig ($use_lcname);
}

if ($asg == NULL) {
	printf ("creating autoscaling group\n");
	$args = array ("autoscaling", "create-auto-scaling-group");
	$args[] = "--auto-scaling-group-name";
	$args[] = $asg_name;
	$args[] = "--min-size";
	$args[] = 0;
	$args[] = "--max-size";
	$args[] = 0;
	$args[] = "--launch-configuration-name";
	$args[] = $use_lcname;
	$args[] = "--load-balancer-names";
	$args[] = $elb_name;
	$args[] = "--vpc-zone-identifier";
	$args[] = implode (",", $subnet_ids);
	$args[] = "--health-check-type";
	$args[] = "ELB";
	$args[] = "--health-check-grace-period";
	$args[] = "90";
	slimstk_aws ($args);
	$asg = get_autoscaling_group ();
}

if (array_search ($elb_name, $asg['LoadBalancerNames']) === FALSE) {
	printf ("error: asg has no load balancer\n");
	printf ("you probably have to delete and remake the asg\n");
	exit (1);
}

$args = array ("autoscaling", "describe-lifecycle-hooks");
$args[] = "--auto-scaling-group-name";
$args[] = $asg_name;
$val = slimstk_aws ($args);
$found = 0;
foreach ($val['LifecycleHooks'] as $hook) {
	$hook_name = $hook['LifecycleHookName'];
	if(preg_match('/CodeDeploy.*automatic-launch/i',
		      $hook_name)) {
		$found = 1;
		break;
	}
}
if (! $found) {
	printf ("*** autoscaling group %s"
		." is missing its codedeploy"
		." lifecycle hook.\n",
		$asg_name);
	printf ("*** you probably need to delete"
		." and recreate the codedeploy\n");
	printf ("*** deployment group"
		." (or perhaps you haven't set up codedeploy yet)\n");
}

$update_asg = 0;

if ($asg['MinSize'] != $min_size)
	$update_asg = 1;

if ($asg['MaxSize'] != $max_size)
	$update_asg = 1;

if (strcmp ($asg['LaunchConfigurationName'], $use_lcname) != 0)
	$update_asg = 1;

if ($update_asg) {
	$args = array ("autoscaling", "update-auto-scaling-group");
	$args[] = "--auto-scaling-group-name";
	$args[] = $asg_name;
	$args[] = "--min-size";
	$args[] = $min_size;
	$args[] = "--max-size";
	$args[] = $max_size;
	$args[] = "--launch-configuration-name";
	$args[] = $use_lcname;
	slimstk_aws ($args);
}

foreach ($lconfigs as $lcname => $lconfig) {
	if (strcmp ($lcname, $use_lcname) != 0) {
		delete_launch_configuration ($lcname);
	}
}

printf ("you probably want to run:\n");
printf ("asg-cycle %s %s\n", $slimstk['confdir'], $stkname);

