#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("/opt/slimstk/slimstkcmd.php");
slimstk_init ();

function usage () {
	printf ("usage: slimstk deploy siteid\n");
	exit (1);
}

$argc = $_SERVER['argc'];
$argv = $_SERVER['argv'];

$G_flag = 0;

while (($c = cgetopt ($argc, $argv, "G")) != FALSE) {
	switch ($c) {
	case "G":
		$G_flag = 1;
		break;
	default:
		usage ();
		break;
	}
}

if ($optind >= $argc)
	usage ();

$for_siteid = $argv[$optind++];

if ($optind != $argc)
	usage ();

if (! preg_match ('/^([^-]*)-(.*)$/', $for_siteid, $parts)) {
	printf ("invalid siteid\n");
	exit (1);
}

$for_app_name = $parts[1];
$for_conf_key = $parts[2];

$match = 0;
foreach ($slimstk['stacks'] as $stkname => $stkinfo) {
	foreach ($stkinfo['sites'] as $siteid => $sinfo) {
		if ($siteid == $for_siteid) {
			$match = 1;
			break;
		}
	}
}

if ($match == 0) {
	printf ("unknown site: %s\n", $for_siteid);
	exit (1);
}

slimstk_set_region ($stkinfo['region']);

$asg_name = sprintf ("%sasg", $stkname);

$commit_tag_key = sprintf ("%s.commit", $for_siteid);

if (! $G_flag) {
	$args = array ("autoscaling", "describe-tags");
	$val = slimstk_aws ($args);
	$last_commit = NULL;
	foreach ($val['Tags'] as $tag) {
		if (strcmp ($tag['ResourceId'], $asg_name) == 0
		    && strcmp ($tag['Key'], $commit_tag_key) == 0) {
			$last_commit = trim ($tag['Value']);
			break;
		}
	}

	if ($last_commit) {
		$revs = explode ("\n", shell_exec ("git rev-list HEAD"));
		$found = 0;
		foreach ($revs as $rev) {
			$rev = trim ($rev);
			if (strcmp ($rev, $last_commit) == 0) {
				$found = 1;
			}
		}
		if (! $found) {
			printf ("\n");
			printf ("*** ERROR: The commit you are trying"
				." to deploy is not a descendant of\n"
				."the commit last deployed - %s\n"
				." If you really want to do this, run:\n"
				."   slimstk deploy -G SITEID\n",
				$last_commit);
			if (strpos (getcwd (), $for_app_name) === FALSE) {
				printf ("*** also note that your working"
					." directory is %s\n"
					." which is unusual for deploying %s\n",
					getcwd (), $for_siteid);
			}
			exit (1);
		}
	}
}

if (($bucket = @$stkinfo['bucket']) == NULL) {
	printf ("can't find bucket for stack\n");
	exit (1);
}

$val = trim (shell_exec ("git status --porcelain"));
if ($val != "") {
	printf ("working directory is dirty ... can't deploy\n");
	exit (1);
}

$commit_full = trim (shell_exec ("git rev-parse HEAD"));
$commit_short = trim (shell_exec ("git rev-parse --short HEAD"));

$t = trim (shell_exec ("git log --max-count=1 --pretty='%at' HEAD"));
$timestamp = strftime ("%Y%m%dT%H%M%S", $t);

$output_base = sprintf ("%s.%s", $for_siteid, $timestamp);
$output_name = sprintf ("%s.%s.tgz", $output_base, $commit_short);

$appspec = "version: 0.0\n"
	."os: linux\n"
	."hooks:\n"
	."  ApplicationStart:\n"
	."    - location: deploy-inst\n"
	."      timeout: 600\n"
	."      runas: ec2-user\n"
	;


$commit_msg = trim (shell_exec ("git log --max-count=1 HEAD"));
$commit_desc = trim (shell_exec ("git log --date=iso"
				 ." --pretty=format:'%h %ad %ae %s'"
				 ." --max-count=1 HEAD"));
printf ("commit_desc = '%s'\n", $commit_desc);

$tags = array ("ResourceId" => $asg_name,
	       "ResourceType" => "auto-scaling-group",
	       "Key" => $commit_tag_key,
	       "Value" => $commit_full,
	       "PropagateAtLaunch" => false);
$commit_tag_cmd = sprintf ("aws --region %s"
			   ."  autoscaling create-or-update-tags"
			   ."  --tags %s\n",
			   escapeshellarg ($stkinfo['region']),
			   escapeshellarg (json_encode ($tags)));
file_put_contents ("TMP.tagcmd", $commit_tag_cmd);

$files = array ();
$src = sprintf ("%s/deploy-inst", dirname ($_SERVER['argv'][0]));
if (! file_exists ($src)) {
	printf ("can't find deploy-inst file ... tried %s\n", $src);
	exit (1);
}
$files[] = array ("src" => $src,
		  "dst" => "deploy-inst");

$files[] = array ("src" => "TMP.tagcmd",
		  "dst" => "tagcmd");

@unlink ("TMP.app.tar");
system ("git archive --output TMP.app.tar HEAD");

exec ("git submodule", $rows, $rc);
if ($rc == 0) {
	foreach ($rows as $row) {
		$arr = explode (' ', trim ($row));
		$mod_commit = $arr[0];
		$mod_name = $arr[1];
		$prefix = sprintf ("%s/", $mod_name);
		$cmd = sprintf ("cd %s;"
				." git archive"
				."  --output ../TMP.extra.tar"
				."  --prefix %s"
				."  %s",
				escapeshellarg ($mod_name),
				escapeshellarg ($prefix),
				escapeshellarg ($mod_commit));
		printf ("%s\n", $cmd);
		system ($cmd, $rc);
		if ($rc != 0) {
			printf ("error handling submodule\n");
			exit (1);
		}
		$cmd = sprintf ("tar --concatenate"
				." --file=TMP.app.tar"
				." TMP.extra.tar");
		system ($cmd, $rc);
		if ($rc != 0) {
			printf ("error adding submodule\n");
			exit (1);
		}
	}
}

$files[] = array ("src" => "TMP.app.tar",
		  "dst" => "app.tar");

file_put_contents ("TMP.commit", $commit_msg);
$files[] = array ("src" => "TMP.commit",
		  "dst" => "commit");

file_put_contents ("TMP.appspec", $appspec);
$files[] = array ("src" => "TMP.appspec",
		  "dst" => "appspec.yml");

file_put_contents ("TMP.dname", $output_base . "\n");
$files[] = array ("src" => "TMP.dname",
		  "dst" => "dname");

slimstk_mktar ("TMP.tgz", $files);

$dest = sprintf ("s3://%s/%s", $bucket, $output_name);
$cmd = sprintf ("aws s3 cp TMP.tgz %s", escapeshellarg ($dest));
printf ("%s\n", $cmd);
system ($cmd, $rc);
if ($rc != 0) {
	printf ("error running: %s\n", $cmd);
	exit (1);
}



printf ("%s is ready\n", $output_name);
printf ("*** proceed to deploy %s? ", $for_siteid);
if (trim (slimstk_gets ()) != "y") {
	printf ("aborted\n");
	exit (1);
}



$args = array ("deploy", "list-applications");
$val = slimstk_aws ($args);

$found = 0;
foreach ($val['applications'] as $app) {
	if (strcmp ($app, $for_app_name) == 0) {
		$found = 1;
		break;
	}
}

if (! $found) {
	$args = array ("deploy", "create-application");
	$args[] = "--application-name";
	$args[] = $for_app_name;
	slimstk_aws ($args);
}

$args = array ("iam", "get-role");
$args[] = "--role-name";
$args[] = "codedeploy";
$val = slimstk_aws ($args);
$role_arn = $val['Role']['Arn'];

$deployment_group_name = $for_conf_key;

$args = array ("deploy", "list-deployment-groups");
$args[] = "--application-name";
$args[] = $for_app_name;
$val = slimstk_aws ($args);
$found = 0;
foreach ($val['deploymentGroups'] as $dname) {
	if (strcmp ($dname, $deployment_group_name) == 0) {
		$found = 1;
		break;
	}
}
	
if ($found == 0) {
	$args = array ("deploy", "create-deployment-group");
	$args[] = "--application-name";
	$args[] = $for_app_name;
	$args[] = "--deployment-group-name";
	$args[] = $deployment_group_name;
	$args[] = "--deployment-config-name";
	$args[] = "CodeDeployDefault.OneAtATime";
	$args[] = "--auto-scaling-groups";
	$args[] = $asg_name;
	$args[] = "--service-role-arn";
	$args[] = $role_arn;
	$val = slimstk_aws ($args);
}


$args = array ("autoscaling", "describe-lifecycle-hooks");
$args[] = "--auto-scaling-group-name";
$args[] = $asg_name;
$val = slimstk_aws ($args);
$found = 0;
foreach ($val['LifecycleHooks'] as $hook) {
	$hook_name = $hook['LifecycleHookName'];
	if(preg_match('/CodeDeploy.*automatic-launch/i',
		      $hook_name)) {
		$found = 1;
		break;
	}
}
if (! $found) {
	printf ("*** autoscaling group %s"
		." is missing its codedeploy"
		." lifecycle hook.\n",
		$asg_name);
	printf ("*** you probably need to delete"
		." and recreate the codedeploy\n");
	printf ("*** deployment group\n");
}

$s3_location = array ("bucket" => $bucket,
		      "key" => $output_name,
		      "bundleType" => "tgz");

$args = array ("deploy", "create-deployment");
$args[] = "--application-name";
$args[] = $for_app_name;
$args[] = "--deployment-group-name";
$args[] = $deployment_group_name;
$args[] = "--description";
$args[] = substr ($commit_desc, 0, 100); 
$args[] = "--s3-location";
$args[] = json_encode ($s3_location);
$val = slimstk_aws ($args);
