#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("./slimstk.php");
slimstk_cmd_init ();

$argv = $_SERVER['argv'];

$stkname = trim (@$argv[1]);

if ($stkname == "") {
	printf ("usage: stack-config stackname\n");
	exit (1);
}

$slimstk['inst_stkname'] = $stkname;

if ((@$stkinfo = $slimstk['stacks'][$stkname]) == NULL) {
	printf ("unknown stack %s for account %s\n",
		$stkname, $slimstk['aws_acct_name']);
	exit (1);
}

$region = $stkinfo['region'];
slimstk_set_region ($region);

$instance_profile_name = sprintf ("%sprofile", $stkname);

/* http://aws.amazon.com/amazon-linux-ami/ */
/* we use Amazon Linux HVM EBS-Backed 64-bit */
/* first experiments were with "ami-b66ed3de" */

$images = array ();
$images['us-east-1'] = "ami-146e2a7c"; /* AMI 2014.09.2 released 2015-01-29 */
$images['us-west-2'] = "ami-dfc39aef"; /* AMI 2014.09.2 released 2015-01-29 */
$images['us-west-1'] = "ami-42908907"; /* AMI 2014.09.2 released 2015-01-29 */

if (($image_id = @$images[$region]) == NULL) {
	printf ("can't find AMI image id - you need to update stack-config\n");
	exit (1);
}

$sg_name = slimstk_getvar_region ("sgext.groupid");

$key = sprintf ("dbhost.%s", $stkinfo['database']);
$db_host = slimstk_getvar_region ($key);

if ($sg_name == "" || $db_host == "") {
	printf ("you need to run ./setup-aws-acct\n");
	exit (1);
}

$elb_name = sprintf ("%selb", $stkname);
$asgroup_name = sprintf ("%sasgroup", $stkname);

$user_data = "#! /bin/bash -xe\n";
$user_data  .= "yum update -y aws-cfn-bootstrap\n";
$user_data .= "(echo '/^Defaults.*requiretty/s/^/#/'; echo 'w')"
	." | ed /etc/sudoers\n";
$user_data .= sprintf ("(echo '/^#Port 22/s/^/Port %d/'; echo 'w')"
		       ." | ed /etc/ssh/sshd_config\n",
		       $alternative_ssh_port);
$user_data .= "service sshd restart\n";
$user_data .= sprintf ("/opt/aws/bin/cfn-init"
		       ." -v"
		       ." --stack %s"
		       ." --resource launch"
		       ." --region %s\n"
		       ."\n",
		       escapeshellarg ($stkname),
		       escapeshellarg ($region));
$user_data .= sprintf ("/opt/aws/bin/cfn-signal"
		       ." -e \$?"
		       ." --stack %s"
		       ." --resource %s"
		       ." --region %s\n",
		       escapeshellarg ($stkname),
		       escapeshellarg ($asgroup_name),
		       escapeshellarg ($region));

$yum = array (
	"mysql" => array (),
	"mysql-server" => array (),
	"mysql-libs" => array (),
	"httpd" => array (),
	"php" => array (),
	"php-mysql" => array (),
	"emacs" => array (),
	"aws-cli" => array (),
	"git" => array (),
	"mod_ssl" => array (),
	"php-pecl-xdebug" => array ()
	);
$packages = array ("yum" => $yum);

$ssh_pub_keys = "";
foreach ($stkinfo['admins'] as $username) {
	$fname = sprintf ("%s/sshkey-%s.pub", $slimstk['confdir'], $username);
	$pub = @file_get_contents ($fname);
	if ($pub == "") {
		printf ("mssing %s\n", $fname);
		exit (1);
	}
	$pub = trim ($pub)."\n";
	$ssh_pub_keys .= $pub;
}

$home_inst = "/home/ec2-user";
$slimstk_inst = sprintf ("%s/slimstk-inst", $home_inst);

$files = array ();

function addfile ($dst, $content, $mode = "000644") {
	global $files;

	$fullname = sprintf ("/home/ec2-user/slimstk-inst/%s", $dst);
	$files[$fullname] = array (
		'content' => $content,
		'mode' => $mode,
		'owner' => 'ec2-user',
		'group' => 'ec2-user'
		);
}

function addfile_binary ($dst, $content) {
	global $files;

	$fullname = sprintf ("/home/ec2-user/slimstk-inst/%s", $dst);
	$files[$fullname] = array (
		'content' => base64_encode ($content),
		'encoding' => 'base64',
		'mode' => '000644',
		'owner' => 'ec2-user',
		'group' => 'ec2-user'
		);
}

addfile ("authorized_keys", $ssh_pub_keys);
addfile ("stacks.json", json_encode ($slimstk));

$db_passwd_kms = sprintf ("dbpass.%s.%s.%s.kms",
			  $slimstk['aws_acct_name'],
			  $stkinfo['database'],
			  $stkinfo['region']);
$src = sprintf ("%s/%s", $slimstk['confdir'], $db_passwd_kms);
if (! file_exists ($src)) {
	printf ("%s does not exist ... run setup-aws-acct\n", $src);
	exit (1);
}
addfile_binary ($db_passwd_kms, file_get_contents ($src));

if (($f = fopen ("INST-FILES", "r")) == NULL) {
	printf ("can't open INST-FILES\n");
	exit (1);
}
while (($fname = fgets ($f)) != NULL) {
	if (($fname = trim ($fname)) == "")
		continue;
	$mode = "000644";
	if (is_executable ($fname))
		$mode = "000755";
	addfile ($fname, file_get_contents ($fname), $mode);
}

$commands = array ();

$commands['inst-init'] = array (
	"command" => array ("su",
			    "--command",
			    "/home/ec2-user/slimstk-inst/inst-init",
			    "--login",
			    "ec2-user"
		)
	);

$services = array (
	"sysvinit" => array (
		"httpd" => array ("enabled" => "true",
				  "ensureRunning" => "true")
		)
	);

/* http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html */
/* order: packages groups users sources files commands services  */
$cfn_init = array ();
$cfn_init["packages"] = $packages;
$cfn_init["files"] = $files;
$cfn_init["commands"] = $commands;
$cfn_init["services"] = $services;

$resources = array ();

$props = array (
	"AvailabilityZones" => array ("Fn::GetAZs" => "" ),
	"LaunchConfigurationName" => array ("Ref" => "launch"),
	"MinSize" => "1",
	"MaxSize" => "2",
	"LoadBalancerNames" => array ( $elb_name )
	);
if ($stkinfo['vpc']) {
	$props['VPCZoneIdentifier'] = json_decode (slimstk_getvar_region ("subnet_ids"));
}

$asgroup = array ("Type" => "AWS::AutoScaling::AutoScalingGroup",
		  "Properties" => $props,
		  "UpdatePolicy" => array (
			  "AutoScalingRollingUpdate" => array (
				  "MinInstancesInService" => "1",
				  "MaxBatchSize" => "1",
				  "PauseTime" => "PT15M",
				  "WaitOnResourceSignals" => "true"
				  )
			  )
	);

$time_limit_minutes = 10;
if (0 && $time_limit_minutes) {
	$val = sprintf ("PT%dM", $time_limit_minutes);
	$asgroup["CreationPolicy"] = array ("ResourceSignal" =>
					array ("Timeout" => $val));
}

$resources[$asgroup_name] = $asgroup;

$props = array ();
$props['IamInstanceProfile'] = array ("Ref" => $instance_profile_name);
$props["ImageId"] = $image_id;
$props["InstanceType"] = "t2.micro";
$props["SecurityGroups"] = array ($sg_name);
if (0) {
	/* useful for early development */
	$props["KeyName"] = "test-key-pair";
}
$props["UserData"] = array ("Fn::Base64" => $user_data);
if ($stkinfo['vpc']) {
	$props['AssociatePublicIpAddress'] = true;
}

$resources["launch"] = array (
	"Type" => "AWS::AutoScaling::LaunchConfiguration",
	"Metadata" => array (
		"AWS::CloudFormation::Init" => array ("config" => $cfn_init)),
	"Properties" => $props
	);


/* ================================================================ */

$props = array ();
$props['Path'] = "/";
$props['Roles'] = array ( "server" );

$resources[$instance_profile_name] = array (
	"Type" => "AWS::IAM::InstanceProfile",
	"Properties" => $props);

/* ================================================================ */

$outputs = array ();

$cform = array ();
$cform["AWSTemplateFormatVersion"] = "2010-09-09";
$cform["Description"] = $stkname;
$cform["Resources"] = $resources;

if (count ($outputs) > 0)
	$cform["Outputs"] = $outputs;

$outname = sprintf ("%s/stack-%s.json", $slimstk['confdir'], $stkname);
file_put_contents ($outname, json_encode ($cform));

printf ("output in %s\n", $outname);
printf ("be sure to commit it over there\n");
