#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("/opt/slimstk/slimstkcmd.php");
slimstk_init ();

function usage () {
	printf ("usage: slimstk [-u user] encrypt infile [outfile]\n");
	exit (1);
}

$argc = $_SERVER['argc'];
$argv = $_SERVER['argv'];

$for_user = NULL;
while (($c = cgetopt ($argc, $argv, "u:")) !== FALSE) {
	switch ($c) {
	case "u":
		$for_user = $optarg;
		break;
	}
}

if ($optind >= $argc)
	usage ();

$inname = $argv[$optind++];

if ($optind < $argc) {
	$outname = $argv[$optind++];
} else {
	$outname = sprintf ("%s.enc", $inname);
}

if ($optind != $argc)
	usage ();

if (strcmp ($inname, "-") == 0) {
	$inname = "php://stdin";
}	

$indata = @file_get_contents ($inname);
if ($indata == "") {
	printf ("error reading %s\n", $inname);
	exit (1);
}

if ($for_user) {
	$users = array ($for_user);
} else {
	$users = array_keys ($slimstk['users']);
}

$symkey_clear = openssl_random_pseudo_bytes (32);
$iv = openssl_random_pseudo_bytes (16);

if (0) {
	printf ("TEST key\n");
	$symkey_clear = "foo";
}

$hdrs = sprintf ("-iv %s\n", base64_encode ($iv));
foreach ($users as $user) {
	$pubkey_file = sprintf ("%s/sshkey-%s.pub", $slimstk['confdir'], $user);
	if (! file_exists ($pubkey_file)) {
		printf ("%s does not exist\n", $pubkey_file);
		exit (1);
	}

	$cmd = sprintf ("ssh-keygen -e -f %s -m pkcs8",
			escapeshellarg ($pubkey_file));
	$pubkey = shell_exec ($cmd);
	$pubkey_resource = openssl_get_publickey ($pubkey);

	/* openssl rsautl -encrypt -inkey id_rsa.pub -pubin -in f1 -out f2 */
	openssl_public_encrypt ($symkey_clear, $symkey_cipher,
				$pubkey_resource);

	$hdrs .= sprintf ("%s %s\n", $user, base64_encode ($symkey_cipher));
}

$outf = fopen ($outname, "w");
fwrite ($outf, $hdrs);
fwrite ($outf, "\n");
fwrite ($outf, openssl_encrypt ($indata, "aes-256-cbc", $symkey_clear, 0, $iv));
fwrite ($outf, "\n");
fclose ($outf);


