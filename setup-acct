#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("/opt/slimstk/slimstkcmd.php");
slimstk_init ();

function setup_role ($role_name, $policy, $trust) {
	slimstk_set_region (NULL);

	$args = array ("iam", "get-role");
	$args[] = "--role-name";
	$args[] = $role_name;
	$args[] = "--query";
	$args[] = "Role.Arn";
	if (slimstk_aws ($args, 1) == NULL) {

		$args = array ("iam", "create-role");
		$args[] = "--role-name";
		$args[] = $role_name;
		$args[] = "--assume-role-policy-document";
		$args[] = json_encode ($trust);
		slimstk_aws ($args);
			   
		$args = array ("iam", "put-role-policy");
		$args[] = "--role-name";
		$args[] = $role_name;
		$args[] = "--policy-name";
		$args[] = sprintf ("%s-policy", $role_name);
		$args[] = "--policy-document";
		$args[] = json_encode ($policy);
		slimstk_aws ($args);
	}
}

function setup_server_role () {
	$role_name = "server";

	/* TODO: reduce permissions
	 *
	 * for codedeploy
	 * http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-iam-instance-profile.html
	 * s3:Get*
	 * s3:List*
	 */
	
	$policy = array (
		"Version" => "2012-10-17",
		"Statement" => array (
			array (
				"Effect" => "Allow",
				"NotAction" => "iam:*",
				"Resource" => "*")
			)
		);

	$trust = array (
		"Version" => "2012-10-17",
		"Statement" => array (
			array ("Action" => "sts:AssumeRole",
			       "Principal" => array (
				       "Service" => "ec2.amazonaws.com"
				       ),
			       "Effect" => "Allow",
			       "Sid" => "")));


	setup_role ($role_name, $policy, $trust);
}

function setup_instance_profile () {
	$profile_name = "inst-profile";

	$args = array ("iam", "list-instance-profiles");
	$val = slimstk_aws ($args);
	$found = 0;
	foreach ($val['InstanceProfiles'] as $profile) {
		if (strcmp ($profile['InstanceProfileName'],
			    $profile_name) == 0) {
			$found = 1;
			break;
		}
	}

	if ($found == 0) {
		$args = array ("iam", "create-instance-profile");
		$args[] = "--instance-profile-name";
		$args[] = $profile_name;
		slimstk_aws ($args);

		$args = array ("iam", "add-role-to-instance-profile");
		$args[] = "--instance-profile-name";
		$args[] = $profile_name;
		$args[] = "--role-name";
		$args[] = "server";
		slimstk_aws ($args);
	}
}

function find_security_group ($group_name) {
	$args = array ("ec2", "describe-security-groups");
	$val = slimstk_aws ($args);
	$groups = $val['SecurityGroups'];

	foreach ($groups as $group_info) {
		if ($group_info['GroupName'] == $group_name)
			return ($group_info);
	}
	return (NULL);
}

function setup_security_group ($stkinfo, $group_name,
			       $incoming_ports, $source_group) {
	slimstk_set_region ($stkinfo['region']);

	if ($source_group) {
		$key = sprintf ("%s.groupid", $source_group);
		$source_group_id = slimstk_getvar_region ($key);
	}


	$group_info = find_security_group ($group_name);
	if ($group_info == NULL) {
		printf ("creating security group %s\n", $group_name);
		$args = array ("ec2", "create-security-group");
		$args[] = "--group-name";
		$args[] = $group_name;
		$args[] = "--description";
		$args[] = $group_name;
		if ($stkinfo['vpc']) {
			$args[] = "--vpc-id";
			$args[] = slimstk_getvar_region ("vpc_id");
		}

		slimstk_aws ($args);
		$group_info = find_security_group ($group_name);
		if ($group_info == NULL) {
			printf ("failed to create %s\n", $group_name);
			exit (1);
		}
	}

	$group_id = $group_info['GroupId'];
	$key = sprintf ("%s.groupid", $group_name);
	slimstk_putvar_region ($key, $group_id);

	$ipperms = array ();
	foreach ($incoming_ports as $port) {
		$match = 0;
		foreach ($group_info['IpPermissions'] as $perm) {
			if ($perm['FromPort'] == $port
			    && $perm['ToPort'] == $port
			    && $perm['IpProtocol'] == "tcp") {
				$match = 1;
				break;
			}
		}

		if (! $match) {
			printf ("adding port %d to %s\n",
				$port, $group_name);
			$ipperm = array ("IpProtocol" => "tcp",
					 "FromPort" => $port,
					 "ToPort" => $port);
			if ($source_group == NULL) {
				$item = array("CidrIp" => "0.0.0.0/0");
				$ipperm['IpRanges'] = array($item);
			} else {
				$item = array ("GroupId" => $source_group_id);
				$ipperm['UserIdGroupPairs'] = array ($item);
			}

			$ipperms[] = $ipperm;
		}
	}

	if (count ($ipperms) > 0) {
		$args = array ("ec2", "authorize-security-group-ingress");
		$args[] = "--group-id";
		$args[] = $group_id;
		$args[] = "--ip-permissions";
		$args[] = json_encode ($ipperms);
		slimstk_aws ($args);
	}

}

function setup_db ($stkinfo, $database) {
	global $slimstk;

	$region = $stkinfo['region'];
	slimstk_set_region ($region);

	$args = array ("rds", "describe-db-instances");
	$val = slimstk_aws ($args);
	$instances = $val['DBInstances'];
	$match = 0;
	foreach ($instances as $iinfo) {
		if (strcmp ($iinfo['DBInstanceIdentifier'], $database) == 0) {
			$match = 1;
			$key = sprintf ("dbhost.%s", $database);
			slimstk_putvar_region ($key,
					       $iinfo['Endpoint']['Address']);
		}
	}

	if ($match) {
		printf ("database %s is already set up\n", $database);
		return;
	}

	printf ("create database %s %s\n", $region, $database);

	printf ("ok? ");
	if (strcmp (trim (slimstk_gets ()), "y") != 0) {
		printf ("...skip\n");
		return;
	}

	printf ("creating...\n");

	$pwname_gpg = sprintf ("%s/dbpass.%s.%s.gpg",
			       $slimstk['confdir'],
			       $slimstk['aws_acct_name'],
			       $database);

	if (! file_exists ($pwname_gpg)) {
		$db_passwd = trim (shell_exec ("pwgen -s 14 1"));
		if (strlen ($db_passwd) != 14) {
			printf ("error generating password\n");
			exit (1);
		}
		$pwname_clear = "DANGER.clear";
		@unlink ($pwname_clear);
		file_put_contents ($pwname_clear, $db_passwd."\n");

		$gpg_key_ids = slimstk_get_gpg_ids_for_db ($database);

		$cmd = sprintf ("gpg --encrypt --output %s",
				escapeshellarg ($pwname_gpg));
		foreach ($gpg_key_ids as $key_id) {
			$cmd .= sprintf (" --recipient %s",
					 escapeshellarg ($key_id));
		}
		$cmd .= sprintf (" %s", escapeshellarg ($pwname_clear));
		@unlink ($pwname_gpg);
		system ($cmd, $rc);
		if ($rc != 0) {
			printf ("error running: %s\n", $cmd);
			exit (1);
		}
		@unlink ($pwname_clear);
	}
	
	$cmd = sprintf ("gpg --quiet --decrypt --output - %s",
			escapeshellarg ($pwname_gpg));
	$db_passwd = trim (shell_exec ($cmd));
	
	if ($db_passwd == "") {
		printf ("no db passwd found\n");
		exit (1);
	}

	printf ("passwd %s\n", $db_passwd);

	if ($stkinfo['vpc']) {
		$vpc_id = slimstk_getvar_region ("vpc_id");

		$subnet_group_name = "db_subnet_group";
		
		$val = slimstk_aws (array ("rds", "describe-db-subnet-groups"));

		$match = 0;
		foreach ($val['DBSubnetGroups'] as $group) {
			if (strcmp ($group['DBSubnetGroupName'],
				    $subnet_group_name) == 0) {
				$match = 1;
				if (strcmp ($group['VpcId'], $vpc_id) != 0) {
					printf ("bad vpc_id for %s: ",
						$subnet_group_name);
					printf ("you need to delete it"
						." in the aws console"
						." under rds ->"
						." subnet groups\n");
					exit (1);
				}
				break;
			}
		}

		if ($match == 0) {
			printf ("you need to create the db subnet group"
				." in the aws RDS console\n");
			
			printf ("Name: %s\n", $subnet_group_name);
			printf ("Description: %s\n", $subnet_group_name);
			printf ("VPC ID: %s\n", $vpc_id);
			printf ("then click 'add all the subnets'\n");
			printf ("finally, run setup-acct again\n");
			exit (1);
		}
	}

	if (($db_type = @$stkinfo['db_type']) == NULL)
		$db_type = "db.t1.micro";

	$args = array ("rds", "create-db-instance");
	$args[] = "--db-instance-identifier";
	$args[] = $database;
	$args[] = "--allocated-storage";
	$args[] = "5"; /* gigabytes, range 5..3072 */
	$args[] = "--db-instance-class";
	$args[] = $db_type;
	if ($stkinfo['vpc']) {
		$args[] = "--db-subnet-group-name";
		$args[] = $subnet_group_name;
	}
	$args[] = "--vpc-security-group-ids";
	$args[] = slimstk_getvar_region ("sgdb.groupid");
	$args[] = "--engine";
	$args[] = "MySQL";
	$args[] = "--master-username";
	$args[] = "root";
	$args[] = "--master-user-password";
	$args[] = $db_passwd;
	$args[] = "--no-publicly-accessible";
	
	slimstk_aws ($args);
	printf ("wait for database to start, then run setup-acct again\n");
	exit (0);
}

function get_availability_zones () {
	global $slimstk;

	$args = array ("ec2", "describe-availability-zones");
	$val = slimstk_aws ($args);
	$avzones = array ();
	foreach ($val['AvailabilityZones'] as $zinfo) {
		if ($zinfo['RegionName'] == $slimstk['current_region']
		    && $zinfo['State'] == "available") {
			$avzones[] = $zinfo['ZoneName'];
		}
	}
	return ($avzones);
}

function setup_elb ($stkname) {
	global $slimstk, $alternative_ssh_port;

	$stkinfo = $slimstk['stacks'][$stkname];
	slimstk_set_region ($stkinfo['region']);

	$elbname = sprintf ("%selb", $stkname);

	$args = array ("elb", "describe-load-balancers");
	$val = slimstk_aws ($args);
	$lbs = $val['LoadBalancerDescriptions'];
	$match = 0;
	foreach ($lbs as $lb) {
		if ($lb['LoadBalancerName'] == $elbname) {
			$match = 1;
			break;
		}
	}

	if ($match) {
		return ($lb['DNSName']);
	}

	$listeners = array ();
	$listeners[] = array (
		"Protocol" => "HTTP",
		"LoadBalancerPort" => 80,
		"InstanceProtocol" => "HTTP",
		"InstancePort" => 80
		);
	$listeners[] = array (
		"Protocol" => "TCP",
		"LoadBalancerPort" => 443,
		"InstanceProtocol" => "TCP",
		"InstancePort" => 443
		);
	$listeners[] = array (
		"Protocol" => "TCP",
		"LoadBalancerPort" => $alternative_ssh_port,
		"InstanceProtocol" => "TCP",
		"InstancePort" => $alternative_ssh_port
		);

	$args = array ("elb", "create-load-balancer");
	$args[] = "--load-balancer-name";
	$args[] = $elbname;
	$args[] = "--listeners";
	$args[] = json_encode ($listeners);
	if ($stkinfo['vpc']) {
		$args[] = "--subnets";
		$args[] = slimstk_getvar_region("subnet_ids");
	} else {
		$args[] = "--availability-zones";
		$args[] = json_encode (get_availability_zones ());
	}
	$args[] = "--security-groups";
	$args[] = slimstk_getvar_region ("sgext.groupid");
	$val = slimstk_aws ($args);

	$dns_name = $val['DNSName'];

	$chk = array ("Target" => "HTTP:80/",
		      "Interval" => 10,
		      "Timeout" => 5,
		      "UnhealthyThreshold" => 2,
		      "HealthyThreshold" => 2);

	$args = array ("elb", "configure-health-check");
	$args[] = "--load-balancer-name";
	$args[] = $elbname;
	$args[] = "--health-check";
	$args[] = json_encode ($chk);
	slimstk_aws ($args);

	$attrs = array ("CrossZoneLoadBalancing"
			=> array ("Enabled" => true));
	$args = array ("elb", "modify-load-balancer-attributes");
	$args[] = "--load-balancer-name";
	$args[] = $elbname;
	$args[] = "--load-balancer-attributes";
	$args[] = json_encode ($attrs);
	slimstk_aws ($args);

	return ($dns_name);
}

function setup_aws_login () {
	global $slimstk;

	$acct = $slimstk['aws_acct_name'];
	$user = $_SERVER['USER'];

	if (($gpg_key_id = slimstk_get_gpg_id ($user)) == NULL) {
		printf ("can't find gpg_key_id for %s\n", $user);
		exit (1);
	}
	$access_key_basename = sprintf ("access-key-%s-%s", $acct, $user);

	$access_key_gpg = sprintf ("%s/%s.gpg",
				   $slimstk['confdir'], $access_key_basename);
	
	if (! file_exists ($access_key_gpg)) {
		printf ("need access_key and secret_access_key for %s on %s\n",
			$user, $acct);
		printf ("access_key_id: ");
		$access_key_id = trim (slimstk_gets ());
		printf ("secret_access_key: ");
		$secret_access_key = trim (slimstk_gets ());

		$text = sprintf ("[%s-%s]\n", $acct, $user);
		$text .= sprintf ("aws_access_key_id = %s\n", $access_key_id);
		$text .= sprintf ("aws_secret_access_key = %s\n",
				  $secret_access_key);
		
		$cleartext_file = "DANGER.clear";
		file_put_contents ($cleartext_file, $text);
		$cmd = sprintf ("gpg --encrypt --output %s --recipient %s %s",
				escapeshellarg ($access_key_gpg),
				escapeshellarg ($gpg_key_id),
				escapeshellarg ($cleartext_file));
		system ($cmd, $rc);
		@unlink ($cleartext_file);
		if ($rc != 0) {
			printf ("error storing %s\n", $access_key_gpg);
			exit (1);
		}
	}
					
	$lfile = sprintf ("%s/bin/slimstk-login-%s",
			  $_SERVER['HOME'], $slimstk['aws_acct_name']);

	$text = "#! /bin/sh\n";
	$prog = sprintf ("%s/slimstk-login", getcwd ());
	$text .= sprintf ("%s %s\n",
			  escapeshellarg ($prog),
			  escapeshellarg ($slimstk['confdir']));
	file_put_contents ($lfile, $text);
	chmod ($lfile, 0775);
}

function setup_kms ($region) {
	global $slimstk;

	slimstk_set_region ($region);

	$alias = sprintf ("alias/%s", $slimstk['aws_acct_name']);
	$args = array ("kms", "list-aliases");
	$val = slimstk_aws ($args);
	$match = 0;
	foreach ($val['Aliases'] as $ainfo) {
		if (strcmp ($ainfo['AliasName'], $alias) == 0) {
			$match = 1;
			break;
		}
	}

	if ($match == 0) {
		printf ("you need to use the aws console create a"
			." key with alias %s\n", $slimstk['aws_acct_name']);
		exit (1);
	}
}

function setup_s3 () {
	global $slimstk;

	foreach ($slimstk['stacks'] as $stkname => $stkinfo) {
		if (preg_match ('/[^-.a-z0-9]/', $stkinfo['bucket'])) {
			printf ("illegal character in bucket name: %s\n",
				$stkinfo['bucket']);
			exit (1);
		}

		$bucket = sprintf ("s3://%s", $stkinfo['bucket']);

		$cmd = sprintf ("aws s3 ls %s > /dev/null 2>&1",
				escapeshellarg ($bucket));
		system ($cmd, $rc);
		if ($rc != 0) {
			printf ("making bucket %s\n", $bucket);
			$cmd = sprintf ("aws s3 mb %s",
					escapeshellarg ($bucket));
			system ($cmd, $rc);
			if ($rc != 0) {
				printf ("error making bucket %s\n", $bucket);
				exit (1);
			}
		}
	}
}

function find_subnet_by_avzone ($vpc_id, $subnets, $avzone) {
	foreach ($subnets as $subnet) {
		if (strcmp ($subnet['VpcId'], $vpc_id) != 0)
			continue;
		if (strcmp ($subnet['AvailabilityZone'], $avzone) == 0)
			return ($subnet);
	}
	return (NULL);
}

function find_free_addr ($subnets, $vpc_addr) {
	$parts = explode (".", $vpc_addr);
	for ($netnum = 1; $netnum <= 10; $netnum++) {
		$parts[2] = $netnum;
		$addr = implode (".", $parts);

		$cidr = sprintf ("%s/24", $addr);
		$used = 0;
		foreach ($subnets as $subnet) {
			if (strcmp ($subnet['CidrBlock'], $cidr) == 0) {
				$used = 1;
				break;
			}
		}
		if ($used == 0)
			return ($addr);
	}

	return (NULL);
}

function setup_vpc ($region) {
	printf ("setting up vpc...\n");

	slimstk_set_region ($region);

	$vpc_addr = "10.0.0.0";
	$cidr_block = sprintf ("%s/16", $vpc_addr);

	$args = array ("ec2", "describe-vpcs");
	$val = slimstk_aws ($args);
	$vpcs = $val['Vpcs'];
	$match = 0;
	foreach ($vpcs as $vpc) {
		if (strcmp ($vpc['CidrBlock'], $cidr_block) == 0) {
			$match = 1;
			$vpc_id = $vpc['VpcId'];
			break;
		}
	}

	if ($match == 0) {
		printf ("creating vpc\n");
		$args = array ("ec2", "create-vpc");
		$args[] = "--cidr-block";
		$args[] = $cidr_block;
		$val = slimstk_aws ($args);
		if (($vpc = @$val['Vpc']) == NULL) {
			printf ("error creating vpc\n");
			exit (1);
		}
		$vpc_id = $vpc['VpcId'];
	}

	slimstk_putvar_region ("vpc_id", $vpc_id);

	$avzones = get_availability_zones ();
	sort ($avzones);

	$val = slimstk_aws (array ("ec2", "describe-subnets"));
	$subnets = $val['Subnets'];

	$subnet_ids = array ();
	foreach ($avzones as $avzone) {
		if (($subnet = find_subnet_by_avzone ($vpc_id, $subnets,
						     $avzone)) ==NULL) {
			$addr = find_free_addr ($subnets, $vpc_addr);
			if ($addr == NULL) {
				printf ("no address available for subnet\n");
				exit (1);
			}

			$cidr = sprintf ("%s/24", $addr);

			printf ("create subnet for %s %s\n", $avzone, $cidr);

			$args = array ("ec2", "create-subnet");
			$args[] = "--vpc-id";
			$args[] = $vpc_id;
			$args[] = "--cidr-block";
			$args[] = $cidr;
			$args[] = "--availability-zone";
			$args[] = $avzone;
			$val = slimstk_aws ($args);
			$subnet = $val['Subnet'];
			$subnets[] = $subnet;
		}

		$subnet_ids[] = $subnet['SubnetId'];

		if (! @$subnet['MapPublicIpOnLaunch']) {
			$args = array ("ec2", "modify-subnet-attribute");
			$args[] = "--subnet-id";
			$args[] = $subnet['SubnetId'];
			$args[] = "--map-public-ip-on-launch";
			slimstk_aws ($args);
		}
	}
	file_put_contents ("TMP.subnets", json_encode ($subnets));

	sort ($subnet_ids);
	slimstk_putvar_region ("subnet_ids", json_encode ($subnet_ids));

	$args = array ("ec2", "describe-internet-gateways");
	$val = slimstk_aws ($args);
	$gateway_id = NULL;
	foreach ($val['InternetGateways'] as $gw) {
		foreach ($gw['Attachments'] as $att) {
			if (strcmp ($att['VpcId'], $vpc_id) == 0) {
				$gateway_id = $gw['InternetGatewayId'];
				break;
			}
		}
		if ($gateway_id)
			break;
	}

	if ($gateway_id == NULL) {
		printf ("create internet gateway\n");
		$args = array ("ec2", "create-internet-gateway");
		$val = slimstk_aws ($args);
		$gw = $val['InternetGateway'];

		$gateway_id = $gw['InternetGatewayId'];

		$args = array ("ec2", "attach-internet-gateway");
		$args[] = "--internet-gateway-id";
		$args[] = $gateway_id;
		$args[] = "--vpc-id";
		$args[] = $vpc_id;
		slimstk_aws ($args);
	}

	$args = array ("ec2", "describe-route-tables");
	$val = slimstk_aws ($args);
	$have_gateway_route = 0;
	$route_table_id = NULL;
	foreach ($val['RouteTables'] as $rtbl) {
		if (strcmp ($rtbl['VpcId'], $vpc_id) == 0) {
			$route_table_id = $rtbl['RouteTableId'];
			foreach ($rtbl['Routes'] as $rt) {
				if (strcmp ($rt['GatewayId'],
					    $gateway_id) == 0)
					$have_gateway_route = 1;
			}
		}
	}

	if ($have_gateway_route == 0) {
		if ($route_table_id == NULL) {
			printf ("can't find route table for vpc\n");
			exit (1);
		}
		$args = array ("ec2", "create-route");
		$args[] = "--route-table-id";
		$args[] = $route_table_id;
		$args[] = "--destination-cidr-block";
		$args[] = "0.0.0.0/0";
		$args[] = "--gateway-id";
		$args[] = $gateway_id;
		slimstk_aws ($args);
	}
}

function equal_json ($arg1, $arg2) {
	if (is_array ($arg1)) {
		if (! is_array ($arg2))
			return (0);

		$keys1 = array_keys ($arg1);
		$keys2 = array_keys ($arg2);
		if (count ($keys1) != count ($keys2))
			return (0);

		sort ($keys1);
		sort ($keys2);

		foreach ($keys1 as $key) {
			if (! isset ($arg1[$key]) || ! isset ($arg2[$key]))
				return (0);
			if (! equal_json ($arg1[$key], $arg2[$key]))
				return (0);
		}
		return (1);
	}
	if ($arg1 == $arg2)
		return (1);
	return (0);
}

function setup_codedeploy () {
	$services = array ("codedeploy.amazonaws.com");
	$trust = array (
		"Version" => "2012-10-17",
		"Statement" => array (
			array ("Sid" => "",
			       "Effect" => "Allow",
			       "Principal" => array ("Service" => $services),
			       "Action" => "sts:AssumeRole"
				)
			)
		);
	
	$actions = array (
		"autoscaling:PutLifecycleHook",
		"autoscaling:DeleteLifecycleHook",
		"autoscaling:RecordLifecycleActionHeartbeat",
		"autoscaling:CompleteLifecycleAction",
		"autoscaling:DescribeAutoscalingGroups",
		"autoscaling:PutInstanceInStandby",
		"autoscaling:PutInstanceInService",
		"ec2:Describe*");
	$perms = array (
		"Version" => "2012-10-17",
		"Statement" => array (
			array ("Action" => $actions,
			       "Effect" => "Allow",
			       "Resource" => "*"
				)
			)
		);

	$args = array ("iam", "list-roles");
	$val = slimstk_aws ($args);
	$found = 0;
	foreach ($val['Roles'] as $role) {
		if (strcmp ($role['RoleName'], "codedeploy") == 0) {
			$found = 1;
			$role_id = $role['RoleId'];
			$role_arn = $role['Arn'];
			break;
		}
	}
	if ($found == 0) {
		$args = array ("iam", "create-role");
		$args[] = "--role-name";
		$args[] = "codedeploy";
		$args[] = "--assume-role-policy-document";
		$args[] = json_encode ($trust);
		$val = slimstk_aws ($args);
		$role = $val['Role'];
		$role_id = $role['RoleId'];
		$role_arn = $role['Arn'];
	} else {
		$existing_trust = $role['AssumeRolePolicyDocument'];
		if (! equal_json ($existing_trust, $trust)) {
			printf ("updating codedeploy trust\n");
			$args = array ("iam", "update-assume-role-policy");
			$args[] = "--role-name";
			$args[] = "codedeploy";
			$args[] = "--policy-document";
			$args[] = json_encode ($trust);
			slimstk_aws ($args);
		}
	}

	$args = array ("iam", "list-role-policies");
	$args[] = "--role-name";
	$args[] = "codedeploy";
	$val = slimstk_aws ($args);
	$found = 0;
	foreach ($val['PolicyNames'] as $name) {
		if (strcmp ($name, "codedeploy-perms") == 0) {
			$found = 1;
			break;
		}
	}

	$perms_ok = 0;
	if ($found) {
		$args = array ("iam", "get-role-policy");
		$args[] = "--role-name";
		$args[] = "codedeploy";
		$args[] = "--policy-name";
		$args[] = "codedeploy-perms";
		$val = slimstk_aws ($args);
		$existing_policy = $val['PolicyDocument'];

		if (equal_json ($perms, $existing_policy))
			$perms_ok = 1;
	}

	if (! $perms_ok) {
		printf ("updating codedeploy perms\n");
		$args = array ("iam", "put-role-policy");
		$args[] = "--role-name";
		$args[] = "codedeploy";
		$args[] = "--policy-name";
		$args[] = "codedeploy-perms";
		$args[] = "--policy-document";
		$args[] = json_encode ($perms);
		slimstk_aws ($args);
	}
}

function check_codedeploy () {
	global $slimstk;

	$regions = array ();
	foreach ($slimstk['stacks'] as $stkname => $stkinfo) {
		$region = $stkinfo['region'];
		$regions[$region] = 1;
	}

	foreach ($regions as $region => $dummy) {
		slimstk_set_region ($region);

		$args = array ("autoscaling", "describe-auto-scaling-groups");
		$val = slimstk_aws ($args);
		$asg_names = array ();
		foreach ($val['AutoScalingGroups'] as $asg) {
			$name = $asg['AutoScalingGroupName'];
			/* only pay attention to our groups */
			if (preg_match ('/(.*)asg$/', $name, $parts)) {
				$asg_stkname = $parts[1];
				if (isset ($slimstk['stacks'][$asg_stkname]))
					$asg_names[] = $name;
			
			}
		}
		foreach ($asg_names as $asg_name) {
			$args = array ("autoscaling",
				       "describe-lifecycle-hooks");
			$args[] = "--auto-scaling-group-name";
			$args[] = $asg_name;
			$val = slimstk_aws ($args);
			$found = 0;
			foreach ($val['LifecycleHooks'] as $hook) {
				$hook_name = $hook['LifecycleHookName'];
				if(preg_match('/CodeDeploy.*automatic-launch/i',
					      $hook_name)) {
					$found = 1;
					break;
				}
			}
			if (! $found) {
				printf ("*** autoscaling group %s"
					." is missing its codedeploy"
					." lifecycle hook.\n",
					$asg_name);
				printf ("*** you probably need to delete"
					." and recreate the codedeploy\n");
				printf ("*** deployment group\n");
			}
		}
	}
}

/* ================================================================ */
setup_instance_profile ();

setup_codedeploy ();

setup_s3 ();

setup_aws_login ();

setup_server_role ();

$region_done = array ();
foreach ($slimstk['stacks'] as $stkname => $stkinfo) {
	$region = $stkinfo['region'];
	if (isset ($region_done[$region]))
		continue;

	$region_done[$region] = 1;

	if (@$stkinfo['vpc'])
		setup_vpc ($region);

	setup_security_group ($stkinfo,
			      "sgext",
			      array ($alternative_ssh_port, 80, 443),
			      NULL);
	setup_security_group ($stkinfo,
			      "sgdb",
			      array (3306),
			      "sgext");

	setup_kms ($region);
}

$region_db_done = array ();
foreach ($slimstk['stacks'] as $stkname => $stkinfo) {
	$region = $stkinfo['region'];
	$db = $stkinfo['database'];
	
	$key = sprintf ("%s|%s", $region, $db);
	if (! isset ($region_db_done[$key])) {
		$region_db_done[$key] = 1;
		setup_db ($stkinfo, $db);
	}
}

foreach ($slimstk['stacks'] as $stkname => $dummy) {
	setup_elb ($stkname);
}

check_codedeploy ();


printf ("be sure to commit any modified files in %s\n", $slimstk['confdir']);
