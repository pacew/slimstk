#! /usr/bin/php
<?php /* -*- mode:php -*- */

require_once ("/var/slimstk/slimstkcmd.php");
slimstk_cmd_init ();

printf ("setup for stack %s\n", $stkname);

$region = $stkinfo['region'];
slimstk_set_region ($region);

$instdir = sprintf ("%s/slimstk-inst", $_SERVER['HOME']);

function setup_dns () {
	global $slimstk, $stkname, $stkinfo;

	if (($server_domain = @$stkinfo['server_domain']) == "")
		return;

	$hosted_zone_id = slimstk_get_hosted_zone_id ($server_domain);
	if ($hosted_zone_id == "") {
		printf ("setup_dns: server_domain %s not found in route53\n",
			$server_domain);
		return;
	}

	$val = slimstk_get_aws_param ("/meta-data/placement/availability-zone");
	$zone_letter = substr ($val, -1);

	$public_ipv4 = slimstk_get_aws_param ("/meta-data/public-ipv4");

	$abs_name = sprintf ("%s%s.%s.",
			     $stkname, $zone_letter, $server_domain);

	printf ("%s => %s\n", $abs_name, $public_ipv4);

	$items = array ();
	$items[] = array ("Action" => "UPSERT", 
			  "ResourceRecordSet" => array (
				  "Name" => $abs_name, 
				  "Type" => "A", 
				  "TTL" => 30, 
				  "ResourceRecords" => array (
					  array ("Value" => $public_ipv4)
					  )
				  )
		);

	$change_batch = array ("Changes" => $items);

	$args = array ("route53", "change-resource-record-sets");
	$args[] = "--hosted-zone-id";
	$args[] = $hosted_zone_id;
	$args[] = "--change-batch";
	$args[] = json_encode ($change_batch);
	slimstk_aws ($args);
}

function decrypt_files () {
	global $instdir, $stkinfo;

	$desired_suffix = sprintf (".%s.kms", $stkinfo['region']);
	$suffixlen = strlen ($desired_suffix);

	$dir = opendir ($instdir);
	while (($name = readdir ($dir)) != NULL) {
		$kms_name = sprintf ("%s/%s", $instdir, $name);
		$suffix = substr ($kms_name, - $suffixlen);
		if (strcmp ($suffix, $desired_suffix) != 0)
			continue;
		$len = strlen ($kms_name);
		$clear_name = substr ($kms_name, 0, - $suffixlen);
		
		printf ("decrypt %s\n", $kms_name);

		$cmd = sprintf ("aws --region %s kms decrypt"
				." --ciphertext-blob fileb://%s"
				." --query Plaintext"
				." --output text",
				escapeshellarg ($stkinfo['region']),
				escapeshellarg ($kms_name));
		printf("%s\n", $cmd);
		$val_base64 = shell_exec ($cmd);
		$cleartext = base64_decode ($val_base64);
		file_put_contents ($clear_name, $cleartext);
	}
}

function setup_db_access () {
	global $slimstk, $stkname, $stkinfo;
	global $instdir, $region;

	$database = $stkinfo['database'];

	$db_passwd_base = sprintf ("dbpass.%s.%s",
				   $slimstk['aws_acct_name'], $database);

	if (! file_exists ($db_passwd_base)) {
		printf ("%s does not exist\n", $db_passwd_base);
		return;
	}

	$db_passwd = trim (file_get_contents ($db_passwd_base));

	$db_host = slimstk_getvar_region ("dbhost.db");

	$text = sprintf ("[client]\n"
			 ."user=root\n"
			 ."host=%s\n"
			 ."password=%s\n",
			 $db_host, $db_passwd);
	$fname = sprintf ("%s/.my.cnf", $_SERVER['HOME']);
	file_put_contents ($fname, $text);
	chmod ($fname, 0600);

	$text = sprintf ("<?php\n"
			 ."\$default_dbparams = array (\n"
			 ." 'host' => '%s',\n"
			 ." 'user' => 'root',\n"
			 ." 'passwd' => '%s'\n"
			 .");\n",
			 $db_host, $db_passwd);
	file_put_contents ("/var/slimstk/dbparams.php", $text);
}

function update_deployment_groups () {
	global $stkname, $stkinfo;

	printf ("update deployment groups\n");

	$elb_name = sprintf ("%selb", $stkname);

	$args = array ("autoscaling", "describe-auto-scaling-groups");
	$val = slimstk_aws ($args);
	$asgroup_name = NULL;
	foreach ($val['AutoScalingGroups'] as $group) {
		foreach ($group['LoadBalancerNames'] as $bname) {
			if (strcmp ($bname, $elb_name) == 0) {
				$asgroup_name = $group['AutoScalingGroupName'];
				break;
			}
		}
	}

	printf( "asgroup_name %s\n", $asgroup_name);

	$args = array ("deploy", "list-applications");
	$val = slimstk_aws ($args);
	$applications = $val['applications'];

	$need_sleep = 0;
	foreach ($applications as $app_name) {
		$args = array ("deploy", "list-deployment-groups");
		$args[] = "--application-name";
		$args[] = $app_name;
		$val = slimstk_aws ($args);
		$found = 0;
		$deployment_groups = $val['deploymentGroups'];

		foreach ($deployment_groups as $conf_key) {
			$siteid = sprintf ("%s-%s", $app_name, $conf_key);
			if (isset ($stkinfo['sites'][$siteid])) {
				if (set_asgroup ($app_name, $conf_key,
						 $asgroup_name)) {
					$need_sleep = 1;
				}
			}
		}
	}

	if ($need_sleep) {
		$amount = 60;
		printf ("updated a deployment group ... sleeping %d\n",
			$amount);
		sleep ($amount);
		printf ("proceeding...\n");
	}
}

function set_asgroup ($app_name, $conf_key, $asgroup_name) {
	$args = array ("deploy", "get-deployment-group");
	$args[] = "--application-name";
	$args[] = $app_name;
	$args[] = "--deployment-group-name";
	$args[] = $conf_key;
	$val = slimstk_aws ($args);
	$groups = $val['deploymentGroupInfo']['autoScalingGroups'];
	
	$found = 0;
	foreach ($groups as $group) {
		if (strcmp ($group['name'], $asgroup_name) == 0) {
			$found = 1;
			break;
		}
	}
	if ($found)
		return (0);

	printf ("updating %s-%s to asgroup %s\n",
		$app_name, $conf_key, $asgroup_name);
	$args = array ("deploy", "update-deployment-group");
	$args[] = "--application-name";
	$args[] = $app_name;
	$args[] = "--current-deployment-group-name";
	$args[] = $conf_key;
	$args[] = "--auto-scaling-groups";
	$args[] = $asgroup_name;
	slimstk_aws ($args);
	return (1);
}

decrypt_files ();

setup_dns ();
setup_db_access ();
update_deployment_groups ();
