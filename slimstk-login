#! /usr/bin/php
<?php /* -*- mode:php -*- */

$argv = $_SERVER['argv'];

if (($confdir = trim (@$argv[1])) == "") {
	printf ("usage: aws-login confdir\n");
	exit (1);
}

$fname = sprintf ("%s/stacks.json", $confdir);
if (($stacks = @json_decode (file_get_contents ($fname), true)) == NULL) {
	printf ("can't parse %s\n", $fname);
	exit (1);
}

$acct = $stacks['aws_acct_name'];
$user = $_SERVER['USER'];

if (($gpg_key_id = @$stacks['users'][$user]['gpg_key_id']) == "") {
	printf ("can't find gpg_key_id for %s\n", $user);
	exit (1);
}

$gpg_name = sprintf ("%s/access-key-%s-%s.gpg", $confdir, $acct, $user);

$stdin = fopen ("php://stdin", "r");

if (! file_exists ($gpg_name)) {
	printf ("need access_key and secret_access_key for %s on %s\n",
		$user, $acct);
	printf ("access_key_id: ");
	$access_key_id = trim (fgets ($stdin));
	printf ("secret_access_key: ");
	$secret_access_key = trim (fgets ($stdin));
	
	$text = sprintf ("[%s-%s]\n", $acct, $user);
	$text .= sprintf ("aws_access_key_id = %s\n", $access_key_id);
	$text .= sprintf ("aws_secret_access_key = %s\n",
			  $secret_access_key);
		
	$cleartext_file = "DANGER.clear";
	file_put_contents ($cleartext_file, $text);
	$cmd = sprintf ("gpg --encrypt --output %s --recipient %s %s",
			escapeshellarg ($gpg_name),
			escapeshellarg ($gpg_key_id),
			escapeshellarg ($cleartext_file));
	system ($cmd, $rc);
	@unlink ($cleartext_file);
	if ($rc != 0) {
		printf ("error storing %s\n", $access_key_gpg);
		exit (1);
	}
}

$cmd = sprintf ("gpg --quiet --decrypt --output - %s",
		escapeshellarg ($gpg_name));

$text = trim (shell_exec ($cmd));

if ($text == NULL) {
	printf ("error running: %s\n", $cmd);
	exit (1);
}

$text2 = preg_replace ("/[[].*[]]/", "[default]", $text);

$dir = sprintf ("%s/.aws", $_SERVER['HOME']);
system (sprintf ("mkdir -p %s; chmod 700 %s",
		 escapeshellarg ($dir),
		 escapeshellarg ($dir)));

$dest = sprintf ("%s/credentials", $dir);
file_put_contents ($dest, sprintf ("%s\n\n%s\n\n", $text, $text2));


